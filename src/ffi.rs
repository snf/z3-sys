/* automatically generated by rust-bindgen */

pub type size_t = ::libc::c_ulong;
pub type __u_char = ::libc::c_uchar;
pub type __u_short = ::libc::c_ushort;
pub type __u_int = ::libc::c_uint;
pub type __u_long = ::libc::c_ulong;
pub type __int8_t = ::libc::c_char;
pub type __uint8_t = ::libc::c_uchar;
pub type __int16_t = ::libc::c_short;
pub type __uint16_t = ::libc::c_ushort;
pub type __int32_t = ::libc::c_int;
pub type __uint32_t = ::libc::c_uint;
pub type __int64_t = ::libc::c_long;
pub type __uint64_t = ::libc::c_ulong;
pub type __quad_t = ::libc::c_long;
pub type __u_quad_t = ::libc::c_ulong;
pub type __dev_t = ::libc::c_ulong;
pub type __uid_t = ::libc::c_uint;
pub type __gid_t = ::libc::c_uint;
pub type __ino_t = ::libc::c_ulong;
pub type __ino64_t = ::libc::c_ulong;
pub type __mode_t = ::libc::c_uint;
pub type __nlink_t = ::libc::c_ulong;
pub type __off_t = ::libc::c_long;
pub type __off64_t = ::libc::c_long;
pub type __pid_t = ::libc::c_int;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed1 {
    pub __val: [::libc::c_int; 2usize],
}
impl ::std::clone::Clone for Struct_Unnamed1 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed1 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type __fsid_t = Struct_Unnamed1;
pub type __clock_t = ::libc::c_long;
pub type __rlim_t = ::libc::c_ulong;
pub type __rlim64_t = ::libc::c_ulong;
pub type __id_t = ::libc::c_uint;
pub type __time_t = ::libc::c_long;
pub type __useconds_t = ::libc::c_uint;
pub type __suseconds_t = ::libc::c_long;
pub type __daddr_t = ::libc::c_int;
pub type __key_t = ::libc::c_int;
pub type __clockid_t = ::libc::c_int;
pub type __timer_t = *mut ::libc::c_void;
pub type __blksize_t = ::libc::c_long;
pub type __blkcnt_t = ::libc::c_long;
pub type __blkcnt64_t = ::libc::c_long;
pub type __fsblkcnt_t = ::libc::c_ulong;
pub type __fsblkcnt64_t = ::libc::c_ulong;
pub type __fsfilcnt_t = ::libc::c_ulong;
pub type __fsfilcnt64_t = ::libc::c_ulong;
pub type __fsword_t = ::libc::c_long;
pub type __ssize_t = ::libc::c_long;
pub type __syscall_slong_t = ::libc::c_long;
pub type __syscall_ulong_t = ::libc::c_ulong;
pub type __loff_t = __off64_t;
pub type __qaddr_t = *mut __quad_t;
pub type __caddr_t = *mut ::libc::c_char;
pub type __intptr_t = ::libc::c_long;
pub type __socklen_t = ::libc::c_uint;
pub type FILE = Struct__IO_FILE;
pub type __FILE = Struct__IO_FILE;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed2 {
    pub __count: ::libc::c_int,
    pub __value: Union_Unnamed3,
}
impl ::std::clone::Clone for Struct_Unnamed2 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed2 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Union_Unnamed3 {
    pub _bindgen_data_: [u32; 1usize],
}
impl Union_Unnamed3 {
    pub unsafe fn __wch(&mut self) -> *mut ::libc::c_uint {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn __wchb(&mut self) -> *mut [::libc::c_char; 4usize] {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
}
impl ::std::clone::Clone for Union_Unnamed3 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Union_Unnamed3 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type __mbstate_t = Struct_Unnamed2;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed4 {
    pub __pos: __off_t,
    pub __state: __mbstate_t,
}
impl ::std::clone::Clone for Struct_Unnamed4 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed4 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type _G_fpos_t = Struct_Unnamed4;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed5 {
    pub __pos: __off64_t,
    pub __state: __mbstate_t,
}
impl ::std::clone::Clone for Struct_Unnamed5 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed5 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type _G_fpos64_t = Struct_Unnamed5;
pub type va_list = __gnuc_va_list;
pub type __gnuc_va_list = __builtin_va_list;
pub enum Struct__IO_jump_t { }
pub type _IO_lock_t = ::libc::c_void;
#[repr(C)]
#[derive(Copy)]
pub struct Struct__IO_marker {
    pub _next: *mut Struct__IO_marker,
    pub _sbuf: *mut Struct__IO_FILE,
    pub _pos: ::libc::c_int,
}
impl ::std::clone::Clone for Struct__IO_marker {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct__IO_marker {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type Enum___codecvt_result = ::libc::c_uint;
pub const __codecvt_ok: ::libc::c_uint = 0;
pub const __codecvt_partial: ::libc::c_uint = 1;
pub const __codecvt_error: ::libc::c_uint = 2;
pub const __codecvt_noconv: ::libc::c_uint = 3;
#[repr(C)]
#[derive(Copy)]
pub struct Struct__IO_FILE {
    pub _flags: ::libc::c_int,
    pub _IO_read_ptr: *mut ::libc::c_char,
    pub _IO_read_end: *mut ::libc::c_char,
    pub _IO_read_base: *mut ::libc::c_char,
    pub _IO_write_base: *mut ::libc::c_char,
    pub _IO_write_ptr: *mut ::libc::c_char,
    pub _IO_write_end: *mut ::libc::c_char,
    pub _IO_buf_base: *mut ::libc::c_char,
    pub _IO_buf_end: *mut ::libc::c_char,
    pub _IO_save_base: *mut ::libc::c_char,
    pub _IO_backup_base: *mut ::libc::c_char,
    pub _IO_save_end: *mut ::libc::c_char,
    pub _markers: *mut Struct__IO_marker,
    pub _chain: *mut Struct__IO_FILE,
    pub _fileno: ::libc::c_int,
    pub _flags2: ::libc::c_int,
    pub _old_offset: __off_t,
    pub _cur_column: ::libc::c_ushort,
    pub _vtable_offset: ::libc::c_char,
    pub _shortbuf: [::libc::c_char; 1usize],
    pub _lock: *mut _IO_lock_t,
    pub _offset: __off64_t,
    pub __pad1: *mut ::libc::c_void,
    pub __pad2: *mut ::libc::c_void,
    pub __pad3: *mut ::libc::c_void,
    pub __pad4: *mut ::libc::c_void,
    pub __pad5: size_t,
    pub _mode: ::libc::c_int,
    pub _unused2: [::libc::c_char; 20usize],
}
impl ::std::clone::Clone for Struct__IO_FILE {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct__IO_FILE {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type _IO_FILE = Struct__IO_FILE;
pub enum Struct__IO_FILE_plus { }
pub type __io_read_fn =
    extern "C" fn(__cookie: *mut ::libc::c_void, __buf: *mut ::libc::c_char,
                  __nbytes: size_t) -> __ssize_t;
pub type __io_write_fn =
    extern "C" fn(__cookie: *mut ::libc::c_void, __buf: *const ::libc::c_char,
                  __n: size_t) -> __ssize_t;
pub type __io_seek_fn =
    extern "C" fn(__cookie: *mut ::libc::c_void, __pos: *mut __off64_t,
                  __w: ::libc::c_int) -> ::libc::c_int;
pub type __io_close_fn =
    extern "C" fn(__cookie: *mut ::libc::c_void) -> ::libc::c_int;
pub type off_t = __off_t;
pub type ssize_t = __ssize_t;
pub type fpos_t = _G_fpos_t;
pub enum Struct__Z3_symbol { }
pub type Z3_symbol = *mut Struct__Z3_symbol;
pub enum Struct__Z3_literals { }
pub type Z3_literals = *mut Struct__Z3_literals;
pub enum Struct__Z3_theory { }
pub type Z3_theory = *mut Struct__Z3_theory;
pub enum Struct__Z3_config { }
pub type Z3_config = *mut Struct__Z3_config;
pub enum Struct__Z3_context { }
pub type Z3_context = *mut Struct__Z3_context;
pub enum Struct__Z3_sort { }
pub type Z3_sort = *mut Struct__Z3_sort;
pub enum Struct__Z3_func_decl { }
pub type Z3_func_decl = *mut Struct__Z3_func_decl;
pub enum Struct__Z3_ast { }
pub type Z3_ast = *mut Struct__Z3_ast;
pub enum Struct__Z3_app { }
pub type Z3_app = *mut Struct__Z3_app;
pub enum Struct__Z3_pattern { }
pub type Z3_pattern = *mut Struct__Z3_pattern;
pub enum Struct__Z3_model { }
pub type Z3_model = *mut Struct__Z3_model;
pub enum Struct__Z3_constructor { }
pub type Z3_constructor = *mut Struct__Z3_constructor;
pub enum Struct__Z3_constructor_list { }
pub type Z3_constructor_list = *mut Struct__Z3_constructor_list;
pub enum Struct__Z3_params { }
pub type Z3_params = *mut Struct__Z3_params;
pub enum Struct__Z3_param_descrs { }
pub type Z3_param_descrs = *mut Struct__Z3_param_descrs;
pub enum Struct__Z3_goal { }
pub type Z3_goal = *mut Struct__Z3_goal;
pub enum Struct__Z3_tactic { }
pub type Z3_tactic = *mut Struct__Z3_tactic;
pub enum Struct__Z3_probe { }
pub type Z3_probe = *mut Struct__Z3_probe;
pub enum Struct__Z3_stats { }
pub type Z3_stats = *mut Struct__Z3_stats;
pub enum Struct__Z3_solver { }
pub type Z3_solver = *mut Struct__Z3_solver;
pub enum Struct__Z3_ast_vector { }
pub type Z3_ast_vector = *mut Struct__Z3_ast_vector;
pub enum Struct__Z3_ast_map { }
pub type Z3_ast_map = *mut Struct__Z3_ast_map;
pub enum Struct__Z3_apply_result { }
pub type Z3_apply_result = *mut Struct__Z3_apply_result;
pub enum Struct__Z3_func_interp { }
pub type Z3_func_interp = *mut Struct__Z3_func_interp;
pub enum Struct__Z3_func_entry { }
pub type Z3_func_entry = *mut Struct__Z3_func_entry;
pub enum Struct__Z3_fixedpoint { }
pub type Z3_fixedpoint = *mut Struct__Z3_fixedpoint;
pub enum Struct__Z3_optimize { }
pub type Z3_optimize = *mut Struct__Z3_optimize;
pub enum Struct__Z3_rcf_num { }
pub type Z3_rcf_num = *mut Struct__Z3_rcf_num;
pub type Z3_theory_data = *mut ::libc::c_void;
pub type Z3_bool = ::libc::c_int;
pub type Z3_string = *const ::libc::c_char;
pub type Z3_string_ptr = *mut Z3_string;
pub type Enum_Unnamed6 = ::libc::c_int;
pub const Z3_L_FALSE: ::libc::c_int = -1;
pub const Z3_L_UNDEF: ::libc::c_int = 0;
pub const Z3_L_TRUE: ::libc::c_int = 1;
pub type Z3_lbool = Enum_Unnamed6;
pub type Enum_Unnamed7 = ::libc::c_uint;
pub const Z3_INT_SYMBOL: ::libc::c_uint = 0;
pub const Z3_STRING_SYMBOL: ::libc::c_uint = 1;
pub type Z3_symbol_kind = Enum_Unnamed7;
pub type Enum_Unnamed8 = ::libc::c_uint;
pub const Z3_PARAMETER_INT: ::libc::c_uint = 0;
pub const Z3_PARAMETER_DOUBLE: ::libc::c_uint = 1;
pub const Z3_PARAMETER_RATIONAL: ::libc::c_uint = 2;
pub const Z3_PARAMETER_SYMBOL: ::libc::c_uint = 3;
pub const Z3_PARAMETER_SORT: ::libc::c_uint = 4;
pub const Z3_PARAMETER_AST: ::libc::c_uint = 5;
pub const Z3_PARAMETER_FUNC_DECL: ::libc::c_uint = 6;
pub type Z3_parameter_kind = Enum_Unnamed8;
pub type Enum_Unnamed9 = ::libc::c_uint;
pub const Z3_UNINTERPRETED_SORT: ::libc::c_uint = 0;
pub const Z3_BOOL_SORT: ::libc::c_uint = 1;
pub const Z3_INT_SORT: ::libc::c_uint = 2;
pub const Z3_REAL_SORT: ::libc::c_uint = 3;
pub const Z3_BV_SORT: ::libc::c_uint = 4;
pub const Z3_ARRAY_SORT: ::libc::c_uint = 5;
pub const Z3_DATATYPE_SORT: ::libc::c_uint = 6;
pub const Z3_RELATION_SORT: ::libc::c_uint = 7;
pub const Z3_FINITE_DOMAIN_SORT: ::libc::c_uint = 8;
pub const Z3_FLOATING_POINT_SORT: ::libc::c_uint = 9;
pub const Z3_ROUNDING_MODE_SORT: ::libc::c_uint = 10;
pub const Z3_UNKNOWN_SORT: ::libc::c_uint = 1000;
pub type Z3_sort_kind = Enum_Unnamed9;
pub type Enum_Unnamed10 = ::libc::c_uint;
pub const Z3_NUMERAL_AST: ::libc::c_uint = 0;
pub const Z3_APP_AST: ::libc::c_uint = 1;
pub const Z3_VAR_AST: ::libc::c_uint = 2;
pub const Z3_QUANTIFIER_AST: ::libc::c_uint = 3;
pub const Z3_SORT_AST: ::libc::c_uint = 4;
pub const Z3_FUNC_DECL_AST: ::libc::c_uint = 5;
pub const Z3_UNKNOWN_AST: ::libc::c_uint = 1000;
pub type Z3_ast_kind = Enum_Unnamed10;
pub type Enum_Unnamed11 = ::libc::c_uint;
pub const Z3_OP_TRUE: ::libc::c_uint = 256;
pub const Z3_OP_FALSE: ::libc::c_uint = 257;
pub const Z3_OP_EQ: ::libc::c_uint = 258;
pub const Z3_OP_DISTINCT: ::libc::c_uint = 259;
pub const Z3_OP_ITE: ::libc::c_uint = 260;
pub const Z3_OP_AND: ::libc::c_uint = 261;
pub const Z3_OP_OR: ::libc::c_uint = 262;
pub const Z3_OP_IFF: ::libc::c_uint = 263;
pub const Z3_OP_XOR: ::libc::c_uint = 264;
pub const Z3_OP_NOT: ::libc::c_uint = 265;
pub const Z3_OP_IMPLIES: ::libc::c_uint = 266;
pub const Z3_OP_OEQ: ::libc::c_uint = 267;
pub const Z3_OP_INTERP: ::libc::c_uint = 268;
pub const Z3_OP_ANUM: ::libc::c_uint = 512;
pub const Z3_OP_AGNUM: ::libc::c_uint = 513;
pub const Z3_OP_LE: ::libc::c_uint = 514;
pub const Z3_OP_GE: ::libc::c_uint = 515;
pub const Z3_OP_LT: ::libc::c_uint = 516;
pub const Z3_OP_GT: ::libc::c_uint = 517;
pub const Z3_OP_ADD: ::libc::c_uint = 518;
pub const Z3_OP_SUB: ::libc::c_uint = 519;
pub const Z3_OP_UMINUS: ::libc::c_uint = 520;
pub const Z3_OP_MUL: ::libc::c_uint = 521;
pub const Z3_OP_DIV: ::libc::c_uint = 522;
pub const Z3_OP_IDIV: ::libc::c_uint = 523;
pub const Z3_OP_REM: ::libc::c_uint = 524;
pub const Z3_OP_MOD: ::libc::c_uint = 525;
pub const Z3_OP_TO_REAL: ::libc::c_uint = 526;
pub const Z3_OP_TO_INT: ::libc::c_uint = 527;
pub const Z3_OP_IS_INT: ::libc::c_uint = 528;
pub const Z3_OP_POWER: ::libc::c_uint = 529;
pub const Z3_OP_STORE: ::libc::c_uint = 768;
pub const Z3_OP_SELECT: ::libc::c_uint = 769;
pub const Z3_OP_CONST_ARRAY: ::libc::c_uint = 770;
pub const Z3_OP_ARRAY_MAP: ::libc::c_uint = 771;
pub const Z3_OP_ARRAY_DEFAULT: ::libc::c_uint = 772;
pub const Z3_OP_SET_UNION: ::libc::c_uint = 773;
pub const Z3_OP_SET_INTERSECT: ::libc::c_uint = 774;
pub const Z3_OP_SET_DIFFERENCE: ::libc::c_uint = 775;
pub const Z3_OP_SET_COMPLEMENT: ::libc::c_uint = 776;
pub const Z3_OP_SET_SUBSET: ::libc::c_uint = 777;
pub const Z3_OP_AS_ARRAY: ::libc::c_uint = 778;
pub const Z3_OP_BNUM: ::libc::c_uint = 1024;
pub const Z3_OP_BIT1: ::libc::c_uint = 1025;
pub const Z3_OP_BIT0: ::libc::c_uint = 1026;
pub const Z3_OP_BNEG: ::libc::c_uint = 1027;
pub const Z3_OP_BADD: ::libc::c_uint = 1028;
pub const Z3_OP_BSUB: ::libc::c_uint = 1029;
pub const Z3_OP_BMUL: ::libc::c_uint = 1030;
pub const Z3_OP_BSDIV: ::libc::c_uint = 1031;
pub const Z3_OP_BUDIV: ::libc::c_uint = 1032;
pub const Z3_OP_BSREM: ::libc::c_uint = 1033;
pub const Z3_OP_BUREM: ::libc::c_uint = 1034;
pub const Z3_OP_BSMOD: ::libc::c_uint = 1035;
pub const Z3_OP_BSDIV0: ::libc::c_uint = 1036;
pub const Z3_OP_BUDIV0: ::libc::c_uint = 1037;
pub const Z3_OP_BSREM0: ::libc::c_uint = 1038;
pub const Z3_OP_BUREM0: ::libc::c_uint = 1039;
pub const Z3_OP_BSMOD0: ::libc::c_uint = 1040;
pub const Z3_OP_ULEQ: ::libc::c_uint = 1041;
pub const Z3_OP_SLEQ: ::libc::c_uint = 1042;
pub const Z3_OP_UGEQ: ::libc::c_uint = 1043;
pub const Z3_OP_SGEQ: ::libc::c_uint = 1044;
pub const Z3_OP_ULT: ::libc::c_uint = 1045;
pub const Z3_OP_SLT: ::libc::c_uint = 1046;
pub const Z3_OP_UGT: ::libc::c_uint = 1047;
pub const Z3_OP_SGT: ::libc::c_uint = 1048;
pub const Z3_OP_BAND: ::libc::c_uint = 1049;
pub const Z3_OP_BOR: ::libc::c_uint = 1050;
pub const Z3_OP_BNOT: ::libc::c_uint = 1051;
pub const Z3_OP_BXOR: ::libc::c_uint = 1052;
pub const Z3_OP_BNAND: ::libc::c_uint = 1053;
pub const Z3_OP_BNOR: ::libc::c_uint = 1054;
pub const Z3_OP_BXNOR: ::libc::c_uint = 1055;
pub const Z3_OP_CONCAT: ::libc::c_uint = 1056;
pub const Z3_OP_SIGN_EXT: ::libc::c_uint = 1057;
pub const Z3_OP_ZERO_EXT: ::libc::c_uint = 1058;
pub const Z3_OP_EXTRACT: ::libc::c_uint = 1059;
pub const Z3_OP_REPEAT: ::libc::c_uint = 1060;
pub const Z3_OP_BREDOR: ::libc::c_uint = 1061;
pub const Z3_OP_BREDAND: ::libc::c_uint = 1062;
pub const Z3_OP_BCOMP: ::libc::c_uint = 1063;
pub const Z3_OP_BSHL: ::libc::c_uint = 1064;
pub const Z3_OP_BLSHR: ::libc::c_uint = 1065;
pub const Z3_OP_BASHR: ::libc::c_uint = 1066;
pub const Z3_OP_ROTATE_LEFT: ::libc::c_uint = 1067;
pub const Z3_OP_ROTATE_RIGHT: ::libc::c_uint = 1068;
pub const Z3_OP_EXT_ROTATE_LEFT: ::libc::c_uint = 1069;
pub const Z3_OP_EXT_ROTATE_RIGHT: ::libc::c_uint = 1070;
pub const Z3_OP_INT2BV: ::libc::c_uint = 1071;
pub const Z3_OP_BV2INT: ::libc::c_uint = 1072;
pub const Z3_OP_CARRY: ::libc::c_uint = 1073;
pub const Z3_OP_XOR3: ::libc::c_uint = 1074;
pub const Z3_OP_PR_UNDEF: ::libc::c_uint = 1280;
pub const Z3_OP_PR_TRUE: ::libc::c_uint = 1281;
pub const Z3_OP_PR_ASSERTED: ::libc::c_uint = 1282;
pub const Z3_OP_PR_GOAL: ::libc::c_uint = 1283;
pub const Z3_OP_PR_MODUS_PONENS: ::libc::c_uint = 1284;
pub const Z3_OP_PR_REFLEXIVITY: ::libc::c_uint = 1285;
pub const Z3_OP_PR_SYMMETRY: ::libc::c_uint = 1286;
pub const Z3_OP_PR_TRANSITIVITY: ::libc::c_uint = 1287;
pub const Z3_OP_PR_TRANSITIVITY_STAR: ::libc::c_uint = 1288;
pub const Z3_OP_PR_MONOTONICITY: ::libc::c_uint = 1289;
pub const Z3_OP_PR_QUANT_INTRO: ::libc::c_uint = 1290;
pub const Z3_OP_PR_DISTRIBUTIVITY: ::libc::c_uint = 1291;
pub const Z3_OP_PR_AND_ELIM: ::libc::c_uint = 1292;
pub const Z3_OP_PR_NOT_OR_ELIM: ::libc::c_uint = 1293;
pub const Z3_OP_PR_REWRITE: ::libc::c_uint = 1294;
pub const Z3_OP_PR_REWRITE_STAR: ::libc::c_uint = 1295;
pub const Z3_OP_PR_PULL_QUANT: ::libc::c_uint = 1296;
pub const Z3_OP_PR_PULL_QUANT_STAR: ::libc::c_uint = 1297;
pub const Z3_OP_PR_PUSH_QUANT: ::libc::c_uint = 1298;
pub const Z3_OP_PR_ELIM_UNUSED_VARS: ::libc::c_uint = 1299;
pub const Z3_OP_PR_DER: ::libc::c_uint = 1300;
pub const Z3_OP_PR_QUANT_INST: ::libc::c_uint = 1301;
pub const Z3_OP_PR_HYPOTHESIS: ::libc::c_uint = 1302;
pub const Z3_OP_PR_LEMMA: ::libc::c_uint = 1303;
pub const Z3_OP_PR_UNIT_RESOLUTION: ::libc::c_uint = 1304;
pub const Z3_OP_PR_IFF_TRUE: ::libc::c_uint = 1305;
pub const Z3_OP_PR_IFF_FALSE: ::libc::c_uint = 1306;
pub const Z3_OP_PR_COMMUTATIVITY: ::libc::c_uint = 1307;
pub const Z3_OP_PR_DEF_AXIOM: ::libc::c_uint = 1308;
pub const Z3_OP_PR_DEF_INTRO: ::libc::c_uint = 1309;
pub const Z3_OP_PR_APPLY_DEF: ::libc::c_uint = 1310;
pub const Z3_OP_PR_IFF_OEQ: ::libc::c_uint = 1311;
pub const Z3_OP_PR_NNF_POS: ::libc::c_uint = 1312;
pub const Z3_OP_PR_NNF_NEG: ::libc::c_uint = 1313;
pub const Z3_OP_PR_NNF_STAR: ::libc::c_uint = 1314;
pub const Z3_OP_PR_CNF_STAR: ::libc::c_uint = 1315;
pub const Z3_OP_PR_SKOLEMIZE: ::libc::c_uint = 1316;
pub const Z3_OP_PR_MODUS_PONENS_OEQ: ::libc::c_uint = 1317;
pub const Z3_OP_PR_TH_LEMMA: ::libc::c_uint = 1318;
pub const Z3_OP_PR_HYPER_RESOLVE: ::libc::c_uint = 1319;
pub const Z3_OP_RA_STORE: ::libc::c_uint = 1536;
pub const Z3_OP_RA_EMPTY: ::libc::c_uint = 1537;
pub const Z3_OP_RA_IS_EMPTY: ::libc::c_uint = 1538;
pub const Z3_OP_RA_JOIN: ::libc::c_uint = 1539;
pub const Z3_OP_RA_UNION: ::libc::c_uint = 1540;
pub const Z3_OP_RA_WIDEN: ::libc::c_uint = 1541;
pub const Z3_OP_RA_PROJECT: ::libc::c_uint = 1542;
pub const Z3_OP_RA_FILTER: ::libc::c_uint = 1543;
pub const Z3_OP_RA_NEGATION_FILTER: ::libc::c_uint = 1544;
pub const Z3_OP_RA_RENAME: ::libc::c_uint = 1545;
pub const Z3_OP_RA_COMPLEMENT: ::libc::c_uint = 1546;
pub const Z3_OP_RA_SELECT: ::libc::c_uint = 1547;
pub const Z3_OP_RA_CLONE: ::libc::c_uint = 1548;
pub const Z3_OP_FD_LT: ::libc::c_uint = 1549;
pub const Z3_OP_LABEL: ::libc::c_uint = 1792;
pub const Z3_OP_LABEL_LIT: ::libc::c_uint = 1793;
pub const Z3_OP_DT_CONSTRUCTOR: ::libc::c_uint = 2048;
pub const Z3_OP_DT_RECOGNISER: ::libc::c_uint = 2049;
pub const Z3_OP_DT_ACCESSOR: ::libc::c_uint = 2050;
pub const Z3_OP_DT_UPDATE_FIELD: ::libc::c_uint = 2051;
pub const Z3_OP_PB_AT_MOST: ::libc::c_uint = 2304;
pub const Z3_OP_PB_LE: ::libc::c_uint = 2305;
pub const Z3_OP_PB_GE: ::libc::c_uint = 2306;
pub const Z3_OP_FPA_RM_NEAREST_TIES_TO_EVEN: ::libc::c_uint = 2307;
pub const Z3_OP_FPA_RM_NEAREST_TIES_TO_AWAY: ::libc::c_uint = 2308;
pub const Z3_OP_FPA_RM_TOWARD_POSITIVE: ::libc::c_uint = 2309;
pub const Z3_OP_FPA_RM_TOWARD_NEGATIVE: ::libc::c_uint = 2310;
pub const Z3_OP_FPA_RM_TOWARD_ZERO: ::libc::c_uint = 2311;
pub const Z3_OP_FPA_NUM: ::libc::c_uint = 2312;
pub const Z3_OP_FPA_PLUS_INF: ::libc::c_uint = 2313;
pub const Z3_OP_FPA_MINUS_INF: ::libc::c_uint = 2314;
pub const Z3_OP_FPA_NAN: ::libc::c_uint = 2315;
pub const Z3_OP_FPA_PLUS_ZERO: ::libc::c_uint = 2316;
pub const Z3_OP_FPA_MINUS_ZERO: ::libc::c_uint = 2317;
pub const Z3_OP_FPA_ADD: ::libc::c_uint = 2318;
pub const Z3_OP_FPA_SUB: ::libc::c_uint = 2319;
pub const Z3_OP_FPA_NEG: ::libc::c_uint = 2320;
pub const Z3_OP_FPA_MUL: ::libc::c_uint = 2321;
pub const Z3_OP_FPA_DIV: ::libc::c_uint = 2322;
pub const Z3_OP_FPA_REM: ::libc::c_uint = 2323;
pub const Z3_OP_FPA_ABS: ::libc::c_uint = 2324;
pub const Z3_OP_FPA_MIN: ::libc::c_uint = 2325;
pub const Z3_OP_FPA_MAX: ::libc::c_uint = 2326;
pub const Z3_OP_FPA_FMA: ::libc::c_uint = 2327;
pub const Z3_OP_FPA_SQRT: ::libc::c_uint = 2328;
pub const Z3_OP_FPA_ROUND_TO_INTEGRAL: ::libc::c_uint = 2329;
pub const Z3_OP_FPA_EQ: ::libc::c_uint = 2330;
pub const Z3_OP_FPA_LT: ::libc::c_uint = 2331;
pub const Z3_OP_FPA_GT: ::libc::c_uint = 2332;
pub const Z3_OP_FPA_LE: ::libc::c_uint = 2333;
pub const Z3_OP_FPA_GE: ::libc::c_uint = 2334;
pub const Z3_OP_FPA_IS_NAN: ::libc::c_uint = 2335;
pub const Z3_OP_FPA_IS_INF: ::libc::c_uint = 2336;
pub const Z3_OP_FPA_IS_ZERO: ::libc::c_uint = 2337;
pub const Z3_OP_FPA_IS_NORMAL: ::libc::c_uint = 2338;
pub const Z3_OP_FPA_IS_SUBNORMAL: ::libc::c_uint = 2339;
pub const Z3_OP_FPA_IS_NEGATIVE: ::libc::c_uint = 2340;
pub const Z3_OP_FPA_IS_POSITIVE: ::libc::c_uint = 2341;
pub const Z3_OP_FPA_FP: ::libc::c_uint = 2342;
pub const Z3_OP_FPA_TO_FP: ::libc::c_uint = 2343;
pub const Z3_OP_FPA_TO_FP_UNSIGNED: ::libc::c_uint = 2344;
pub const Z3_OP_FPA_TO_UBV: ::libc::c_uint = 2345;
pub const Z3_OP_FPA_TO_SBV: ::libc::c_uint = 2346;
pub const Z3_OP_FPA_TO_REAL: ::libc::c_uint = 2347;
pub const Z3_OP_FPA_TO_IEEE_BV: ::libc::c_uint = 2348;
pub const Z3_OP_UNINTERPRETED: ::libc::c_uint = 2349;
pub type Z3_decl_kind = Enum_Unnamed11;
pub type Enum_Unnamed12 = ::libc::c_uint;
pub const Z3_PK_UINT: ::libc::c_uint = 0;
pub const Z3_PK_BOOL: ::libc::c_uint = 1;
pub const Z3_PK_DOUBLE: ::libc::c_uint = 2;
pub const Z3_PK_SYMBOL: ::libc::c_uint = 3;
pub const Z3_PK_STRING: ::libc::c_uint = 4;
pub const Z3_PK_OTHER: ::libc::c_uint = 5;
pub const Z3_PK_INVALID: ::libc::c_uint = 6;
pub type Z3_param_kind = Enum_Unnamed12;
pub type Enum_Unnamed13 = ::libc::c_uint;
pub const Z3_NO_FAILURE: ::libc::c_uint = 0;
pub const Z3_UNKNOWN: ::libc::c_uint = 1;
pub const Z3_TIMEOUT: ::libc::c_uint = 2;
pub const Z3_MEMOUT_WATERMARK: ::libc::c_uint = 3;
pub const Z3_CANCELED: ::libc::c_uint = 4;
pub const Z3_NUM_CONFLICTS: ::libc::c_uint = 5;
pub const Z3_THEORY: ::libc::c_uint = 6;
pub const Z3_QUANTIFIERS: ::libc::c_uint = 7;
pub type Z3_search_failure = Enum_Unnamed13;
pub type Enum_Unnamed14 = ::libc::c_uint;
pub const Z3_PRINT_SMTLIB_FULL: ::libc::c_uint = 0;
pub const Z3_PRINT_LOW_LEVEL: ::libc::c_uint = 1;
pub const Z3_PRINT_SMTLIB_COMPLIANT: ::libc::c_uint = 2;
pub const Z3_PRINT_SMTLIB2_COMPLIANT: ::libc::c_uint = 3;
pub type Z3_ast_print_mode = Enum_Unnamed14;
pub type Enum_Unnamed15 = ::libc::c_uint;
pub const Z3_OK: ::libc::c_uint = 0;
pub const Z3_SORT_ERROR: ::libc::c_uint = 1;
pub const Z3_IOB: ::libc::c_uint = 2;
pub const Z3_INVALID_ARG: ::libc::c_uint = 3;
pub const Z3_PARSER_ERROR: ::libc::c_uint = 4;
pub const Z3_NO_PARSER: ::libc::c_uint = 5;
pub const Z3_INVALID_PATTERN: ::libc::c_uint = 6;
pub const Z3_MEMOUT_FAIL: ::libc::c_uint = 7;
pub const Z3_FILE_ACCESS_ERROR: ::libc::c_uint = 8;
pub const Z3_INTERNAL_FATAL: ::libc::c_uint = 9;
pub const Z3_INVALID_USAGE: ::libc::c_uint = 10;
pub const Z3_DEC_REF_ERROR: ::libc::c_uint = 11;
pub const Z3_EXCEPTION: ::libc::c_uint = 12;
pub type Z3_error_code = Enum_Unnamed15;
pub type Z3_error_handler =
    extern "C" fn(c: Z3_context, e: Z3_error_code) -> ();
pub type Enum_Unnamed16 = ::libc::c_uint;
pub const Z3_GOAL_PRECISE: ::libc::c_uint = 0;
pub const Z3_GOAL_UNDER: ::libc::c_uint = 1;
pub const Z3_GOAL_OVER: ::libc::c_uint = 2;
pub const Z3_GOAL_UNDER_OVER: ::libc::c_uint = 3;
pub type Z3_goal_prec = Enum_Unnamed16;
pub type Z3_reduce_eq_callback_fptr =
    extern "C" fn(t: Z3_theory, a: Z3_ast, b: Z3_ast, r: *mut Z3_ast)
        -> Z3_bool;
pub type Z3_reduce_app_callback_fptr =
    extern "C" fn(arg1: Z3_theory, arg2: Z3_func_decl, arg3: ::libc::c_uint,
                  arg4: *const Z3_ast, arg5: *mut Z3_ast) -> Z3_bool;
pub type Z3_reduce_distinct_callback_fptr =
    extern "C" fn(arg1: Z3_theory, arg2: ::libc::c_uint, arg3: *const Z3_ast,
                  arg4: *mut Z3_ast) -> Z3_bool;
pub type Z3_theory_callback_fptr = extern "C" fn(t: Z3_theory) -> ();
pub type Z3_theory_final_check_callback_fptr =
    extern "C" fn(arg1: Z3_theory) -> Z3_bool;
pub type Z3_theory_ast_callback_fptr =
    extern "C" fn(arg1: Z3_theory, arg2: Z3_ast) -> ();
pub type Z3_theory_ast_bool_callback_fptr =
    extern "C" fn(arg1: Z3_theory, arg2: Z3_ast, arg3: Z3_bool) -> ();
pub type Z3_theory_ast_ast_callback_fptr =
    extern "C" fn(arg1: Z3_theory, arg2: Z3_ast, arg3: Z3_ast) -> ();
pub type Z3_fixedpoint_reduce_assign_callback_fptr =
    extern "C" fn(arg1: *mut ::libc::c_void, arg2: Z3_func_decl,
                  arg3: ::libc::c_uint, arg4: *const Z3_ast,
                  arg5: ::libc::c_uint, arg6: *const Z3_ast) -> ();
pub type Z3_fixedpoint_reduce_app_callback_fptr =
    extern "C" fn(arg1: *mut ::libc::c_void, arg2: Z3_func_decl,
                  arg3: ::libc::c_uint, arg4: *const Z3_ast,
                  arg5: *mut Z3_ast) -> ();
#[link(name = "z3")]
extern "C" {
    pub static mut _IO_2_1_stdin_: Struct__IO_FILE_plus;
    pub static mut _IO_2_1_stdout_: Struct__IO_FILE_plus;
    pub static mut _IO_2_1_stderr_: Struct__IO_FILE_plus;
    pub static mut stdin: *mut Struct__IO_FILE;
    pub static mut stdout: *mut Struct__IO_FILE;
    pub static mut stderr: *mut Struct__IO_FILE;
    pub static mut sys_nerr: ::libc::c_int;
    pub static mut sys_errlist: *const *const ::libc::c_char;
}
#[link(name = "z3")]
extern "C" {
    pub fn __underflow(arg1: *mut _IO_FILE) -> ::libc::c_int;
    pub fn __uflow(arg1: *mut _IO_FILE) -> ::libc::c_int;
    pub fn __overflow(arg1: *mut _IO_FILE, arg2: ::libc::c_int)
     -> ::libc::c_int;
    pub fn _IO_getc(__fp: *mut _IO_FILE) -> ::libc::c_int;
    pub fn _IO_putc(__c: ::libc::c_int, __fp: *mut _IO_FILE) -> ::libc::c_int;
    pub fn _IO_feof(__fp: *mut _IO_FILE) -> ::libc::c_int;
    pub fn _IO_ferror(__fp: *mut _IO_FILE) -> ::libc::c_int;
    pub fn _IO_peekc_locked(__fp: *mut _IO_FILE) -> ::libc::c_int;
    pub fn _IO_flockfile(arg1: *mut _IO_FILE) -> ();
    pub fn _IO_funlockfile(arg1: *mut _IO_FILE) -> ();
    pub fn _IO_ftrylockfile(arg1: *mut _IO_FILE) -> ::libc::c_int;
    pub fn _IO_vfscanf(arg1: *mut _IO_FILE, arg2: *const ::libc::c_char,
                       arg3: __gnuc_va_list, arg4: *mut ::libc::c_int)
     -> ::libc::c_int;
    pub fn _IO_vfprintf(arg1: *mut _IO_FILE, arg2: *const ::libc::c_char,
                        arg3: __gnuc_va_list) -> ::libc::c_int;
    pub fn _IO_padn(arg1: *mut _IO_FILE, arg2: ::libc::c_int, arg3: __ssize_t)
     -> __ssize_t;
    pub fn _IO_sgetn(arg1: *mut _IO_FILE, arg2: *mut ::libc::c_void,
                     arg3: size_t) -> size_t;
    pub fn _IO_seekoff(arg1: *mut _IO_FILE, arg2: __off64_t,
                       arg3: ::libc::c_int, arg4: ::libc::c_int) -> __off64_t;
    pub fn _IO_seekpos(arg1: *mut _IO_FILE, arg2: __off64_t,
                       arg3: ::libc::c_int) -> __off64_t;
    pub fn _IO_free_backup_area(arg1: *mut _IO_FILE) -> ();
    pub fn remove(__filename: *const ::libc::c_char) -> ::libc::c_int;
    pub fn rename(__old: *const ::libc::c_char, __new: *const ::libc::c_char)
     -> ::libc::c_int;
    pub fn renameat(__oldfd: ::libc::c_int, __old: *const ::libc::c_char,
                    __newfd: ::libc::c_int, __new: *const ::libc::c_char)
     -> ::libc::c_int;
    pub fn tmpfile() -> *mut FILE;
    pub fn tmpnam(__s: *mut ::libc::c_char) -> *mut ::libc::c_char;
    pub fn tmpnam_r(__s: *mut ::libc::c_char) -> *mut ::libc::c_char;
    pub fn tempnam(__dir: *const ::libc::c_char, __pfx: *const ::libc::c_char)
     -> *mut ::libc::c_char;
    pub fn fclose(__stream: *mut FILE) -> ::libc::c_int;
    pub fn fflush(__stream: *mut FILE) -> ::libc::c_int;
    pub fn fflush_unlocked(__stream: *mut FILE) -> ::libc::c_int;
    pub fn fopen(__filename: *const ::libc::c_char,
                 __modes: *const ::libc::c_char) -> *mut FILE;
    pub fn freopen(__filename: *const ::libc::c_char,
                   __modes: *const ::libc::c_char, __stream: *mut FILE)
     -> *mut FILE;
    pub fn fdopen(__fd: ::libc::c_int, __modes: *const ::libc::c_char)
     -> *mut FILE;
    pub fn fmemopen(__s: *mut ::libc::c_void, __len: size_t,
                    __modes: *const ::libc::c_char) -> *mut FILE;
    pub fn open_memstream(__bufloc: *mut *mut ::libc::c_char,
                          __sizeloc: *mut size_t) -> *mut FILE;
    pub fn setbuf(__stream: *mut FILE, __buf: *mut ::libc::c_char) -> ();
    pub fn setvbuf(__stream: *mut FILE, __buf: *mut ::libc::c_char,
                   __modes: ::libc::c_int, __n: size_t) -> ::libc::c_int;
    pub fn setbuffer(__stream: *mut FILE, __buf: *mut ::libc::c_char,
                     __size: size_t) -> ();
    pub fn setlinebuf(__stream: *mut FILE) -> ();
    pub fn fprintf(__stream: *mut FILE, __format: *const ::libc::c_char, ...)
     -> ::libc::c_int;
    pub fn printf(__format: *const ::libc::c_char, ...) -> ::libc::c_int;
    pub fn sprintf(__s: *mut ::libc::c_char,
                   __format: *const ::libc::c_char, ...) -> ::libc::c_int;
    pub fn vfprintf(__s: *mut FILE, __format: *const ::libc::c_char,
                    __arg: __gnuc_va_list) -> ::libc::c_int;
    pub fn vprintf(__format: *const ::libc::c_char, __arg: __gnuc_va_list)
     -> ::libc::c_int;
    pub fn vsprintf(__s: *mut ::libc::c_char, __format: *const ::libc::c_char,
                    __arg: __gnuc_va_list) -> ::libc::c_int;
    pub fn snprintf(__s: *mut ::libc::c_char, __maxlen: size_t,
                    __format: *const ::libc::c_char, ...) -> ::libc::c_int;
    pub fn vsnprintf(__s: *mut ::libc::c_char, __maxlen: size_t,
                     __format: *const ::libc::c_char, __arg: __gnuc_va_list)
     -> ::libc::c_int;
    pub fn vdprintf(__fd: ::libc::c_int, __fmt: *const ::libc::c_char,
                    __arg: __gnuc_va_list) -> ::libc::c_int;
    pub fn dprintf(__fd: ::libc::c_int, __fmt: *const ::libc::c_char, ...)
     -> ::libc::c_int;
    pub fn fscanf(__stream: *mut FILE, __format: *const ::libc::c_char, ...)
     -> ::libc::c_int;
    pub fn scanf(__format: *const ::libc::c_char, ...) -> ::libc::c_int;
    pub fn sscanf(__s: *const ::libc::c_char,
                  __format: *const ::libc::c_char, ...) -> ::libc::c_int;
    pub fn vfscanf(__s: *mut FILE, __format: *const ::libc::c_char,
                   __arg: __gnuc_va_list) -> ::libc::c_int;
    pub fn vscanf(__format: *const ::libc::c_char, __arg: __gnuc_va_list)
     -> ::libc::c_int;
    pub fn vsscanf(__s: *const ::libc::c_char,
                   __format: *const ::libc::c_char, __arg: __gnuc_va_list)
     -> ::libc::c_int;
    pub fn fgetc(__stream: *mut FILE) -> ::libc::c_int;
    pub fn getc(__stream: *mut FILE) -> ::libc::c_int;
    pub fn getchar() -> ::libc::c_int;
    pub fn getc_unlocked(__stream: *mut FILE) -> ::libc::c_int;
    pub fn getchar_unlocked() -> ::libc::c_int;
    pub fn fgetc_unlocked(__stream: *mut FILE) -> ::libc::c_int;
    pub fn fputc(__c: ::libc::c_int, __stream: *mut FILE) -> ::libc::c_int;
    pub fn putc(__c: ::libc::c_int, __stream: *mut FILE) -> ::libc::c_int;
    pub fn putchar(__c: ::libc::c_int) -> ::libc::c_int;
    pub fn fputc_unlocked(__c: ::libc::c_int, __stream: *mut FILE)
     -> ::libc::c_int;
    pub fn putc_unlocked(__c: ::libc::c_int, __stream: *mut FILE)
     -> ::libc::c_int;
    pub fn putchar_unlocked(__c: ::libc::c_int) -> ::libc::c_int;
    pub fn getw(__stream: *mut FILE) -> ::libc::c_int;
    pub fn putw(__w: ::libc::c_int, __stream: *mut FILE) -> ::libc::c_int;
    pub fn fgets(__s: *mut ::libc::c_char, __n: ::libc::c_int,
                 __stream: *mut FILE) -> *mut ::libc::c_char;
    pub fn gets(__s: *mut ::libc::c_char) -> *mut ::libc::c_char;
    pub fn __getdelim(__lineptr: *mut *mut ::libc::c_char, __n: *mut size_t,
                      __delimiter: ::libc::c_int, __stream: *mut FILE)
     -> __ssize_t;
    pub fn getdelim(__lineptr: *mut *mut ::libc::c_char, __n: *mut size_t,
                    __delimiter: ::libc::c_int, __stream: *mut FILE)
     -> __ssize_t;
    pub fn getline(__lineptr: *mut *mut ::libc::c_char, __n: *mut size_t,
                   __stream: *mut FILE) -> __ssize_t;
    pub fn fputs(__s: *const ::libc::c_char, __stream: *mut FILE)
     -> ::libc::c_int;
    pub fn puts(__s: *const ::libc::c_char) -> ::libc::c_int;
    pub fn ungetc(__c: ::libc::c_int, __stream: *mut FILE) -> ::libc::c_int;
    pub fn fread(__ptr: *mut ::libc::c_void, __size: size_t, __n: size_t,
                 __stream: *mut FILE) -> size_t;
    pub fn fwrite(__ptr: *const ::libc::c_void, __size: size_t, __n: size_t,
                  __s: *mut FILE) -> size_t;
    pub fn fread_unlocked(__ptr: *mut ::libc::c_void, __size: size_t,
                          __n: size_t, __stream: *mut FILE) -> size_t;
    pub fn fwrite_unlocked(__ptr: *const ::libc::c_void, __size: size_t,
                           __n: size_t, __stream: *mut FILE) -> size_t;
    pub fn fseek(__stream: *mut FILE, __off: ::libc::c_long,
                 __whence: ::libc::c_int) -> ::libc::c_int;
    pub fn ftell(__stream: *mut FILE) -> ::libc::c_long;
    pub fn rewind(__stream: *mut FILE) -> ();
    pub fn fseeko(__stream: *mut FILE, __off: __off_t,
                  __whence: ::libc::c_int) -> ::libc::c_int;
    pub fn ftello(__stream: *mut FILE) -> __off_t;
    pub fn fgetpos(__stream: *mut FILE, __pos: *mut fpos_t) -> ::libc::c_int;
    pub fn fsetpos(__stream: *mut FILE, __pos: *const fpos_t)
     -> ::libc::c_int;
    pub fn clearerr(__stream: *mut FILE) -> ();
    pub fn feof(__stream: *mut FILE) -> ::libc::c_int;
    pub fn ferror(__stream: *mut FILE) -> ::libc::c_int;
    pub fn clearerr_unlocked(__stream: *mut FILE) -> ();
    pub fn feof_unlocked(__stream: *mut FILE) -> ::libc::c_int;
    pub fn ferror_unlocked(__stream: *mut FILE) -> ::libc::c_int;
    pub fn perror(__s: *const ::libc::c_char) -> ();
    pub fn fileno(__stream: *mut FILE) -> ::libc::c_int;
    pub fn fileno_unlocked(__stream: *mut FILE) -> ::libc::c_int;
    pub fn popen(__command: *const ::libc::c_char,
                 __modes: *const ::libc::c_char) -> *mut FILE;
    pub fn pclose(__stream: *mut FILE) -> ::libc::c_int;
    pub fn ctermid(__s: *mut ::libc::c_char) -> *mut ::libc::c_char;
    pub fn flockfile(__stream: *mut FILE) -> ();
    pub fn ftrylockfile(__stream: *mut FILE) -> ::libc::c_int;
    pub fn funlockfile(__stream: *mut FILE) -> ();
    pub fn Z3_global_param_set(param_id: Z3_string, param_value: Z3_string)
     -> ();
    pub fn Z3_global_param_reset_all() -> ();
    pub fn Z3_global_param_get(param_id: Z3_string,
                               param_value: Z3_string_ptr) -> Z3_bool;
    pub fn Z3_mk_config() -> Z3_config;
    pub fn Z3_del_config(c: Z3_config) -> ();
    pub fn Z3_set_param_value(c: Z3_config, param_id: Z3_string,
                              param_value: Z3_string) -> ();
    pub fn Z3_mk_context(c: Z3_config) -> Z3_context;
    pub fn Z3_mk_context_rc(c: Z3_config) -> Z3_context;
    pub fn Z3_del_context(c: Z3_context) -> ();
    pub fn Z3_inc_ref(c: Z3_context, a: Z3_ast) -> ();
    pub fn Z3_dec_ref(c: Z3_context, a: Z3_ast) -> ();
    pub fn Z3_update_param_value(c: Z3_context, param_id: Z3_string,
                                 param_value: Z3_string) -> ();
    pub fn Z3_interrupt(c: Z3_context) -> ();
    pub fn Z3_mk_params(c: Z3_context) -> Z3_params;
    pub fn Z3_params_inc_ref(c: Z3_context, p: Z3_params) -> ();
    pub fn Z3_params_dec_ref(c: Z3_context, p: Z3_params) -> ();
    pub fn Z3_params_set_bool(c: Z3_context, p: Z3_params, k: Z3_symbol,
                              v: Z3_bool) -> ();
    pub fn Z3_params_set_uint(c: Z3_context, p: Z3_params, k: Z3_symbol,
                              v: ::libc::c_uint) -> ();
    pub fn Z3_params_set_double(c: Z3_context, p: Z3_params, k: Z3_symbol,
                                v: ::libc::c_double) -> ();
    pub fn Z3_params_set_symbol(c: Z3_context, p: Z3_params, k: Z3_symbol,
                                v: Z3_symbol) -> ();
    pub fn Z3_params_to_string(c: Z3_context, p: Z3_params) -> Z3_string;
    pub fn Z3_params_validate(c: Z3_context, p: Z3_params, d: Z3_param_descrs)
     -> ();
    pub fn Z3_param_descrs_inc_ref(c: Z3_context, p: Z3_param_descrs) -> ();
    pub fn Z3_param_descrs_dec_ref(c: Z3_context, p: Z3_param_descrs) -> ();
    pub fn Z3_param_descrs_get_kind(c: Z3_context, p: Z3_param_descrs,
                                    n: Z3_symbol) -> Z3_param_kind;
    pub fn Z3_param_descrs_size(c: Z3_context, p: Z3_param_descrs)
     -> ::libc::c_uint;
    pub fn Z3_param_descrs_get_name(c: Z3_context, p: Z3_param_descrs,
                                    i: ::libc::c_uint) -> Z3_symbol;
    pub fn Z3_param_descrs_to_string(c: Z3_context, p: Z3_param_descrs)
     -> Z3_string;
    pub fn Z3_mk_int_symbol(c: Z3_context, i: ::libc::c_int) -> Z3_symbol;
    pub fn Z3_mk_string_symbol(c: Z3_context, s: Z3_string) -> Z3_symbol;
    pub fn Z3_mk_uninterpreted_sort(c: Z3_context, s: Z3_symbol) -> Z3_sort;
    pub fn Z3_mk_bool_sort(c: Z3_context) -> Z3_sort;
    pub fn Z3_mk_int_sort(c: Z3_context) -> Z3_sort;
    pub fn Z3_mk_real_sort(c: Z3_context) -> Z3_sort;
    pub fn Z3_mk_bv_sort(c: Z3_context, sz: ::libc::c_uint) -> Z3_sort;
    pub fn Z3_mk_finite_domain_sort(c: Z3_context, name: Z3_symbol,
                                    size: ::libc::c_ulonglong) -> Z3_sort;
    pub fn Z3_mk_array_sort(c: Z3_context, domain: Z3_sort, range: Z3_sort)
     -> Z3_sort;
    pub fn Z3_mk_tuple_sort(c: Z3_context, mk_tuple_name: Z3_symbol,
                            num_fields: ::libc::c_uint,
                            field_names: *const Z3_symbol,
                            field_sorts: *const Z3_sort,
                            mk_tuple_decl: *mut Z3_func_decl,
                            proj_decl: *mut Z3_func_decl) -> Z3_sort;
    pub fn Z3_mk_enumeration_sort(c: Z3_context, name: Z3_symbol,
                                  n: ::libc::c_uint,
                                  enum_names: *const Z3_symbol,
                                  enum_consts: *mut Z3_func_decl,
                                  enum_testers: *mut Z3_func_decl) -> Z3_sort;
    pub fn Z3_mk_list_sort(c: Z3_context, name: Z3_symbol, elem_sort: Z3_sort,
                           nil_decl: *mut Z3_func_decl,
                           is_nil_decl: *mut Z3_func_decl,
                           cons_decl: *mut Z3_func_decl,
                           is_cons_decl: *mut Z3_func_decl,
                           head_decl: *mut Z3_func_decl,
                           tail_decl: *mut Z3_func_decl) -> Z3_sort;
    pub fn Z3_mk_constructor(c: Z3_context, name: Z3_symbol,
                             recognizer: Z3_symbol,
                             num_fields: ::libc::c_uint,
                             field_names: *const Z3_symbol,
                             sorts: *const Z3_sort,
                             sort_refs: *mut ::libc::c_uint)
     -> Z3_constructor;
    pub fn Z3_del_constructor(c: Z3_context, constr: Z3_constructor) -> ();
    pub fn Z3_mk_datatype(c: Z3_context, name: Z3_symbol,
                          num_constructors: ::libc::c_uint,
                          constructors: *mut Z3_constructor) -> Z3_sort;
    pub fn Z3_mk_constructor_list(c: Z3_context,
                                  num_constructors: ::libc::c_uint,
                                  constructors: *const Z3_constructor)
     -> Z3_constructor_list;
    pub fn Z3_del_constructor_list(c: Z3_context, clist: Z3_constructor_list)
     -> ();
    pub fn Z3_mk_datatypes(c: Z3_context, num_sorts: ::libc::c_uint,
                           sort_names: *const Z3_symbol, sorts: *mut Z3_sort,
                           constructor_lists: *mut Z3_constructor_list) -> ();
    pub fn Z3_query_constructor(c: Z3_context, constr: Z3_constructor,
                                num_fields: ::libc::c_uint,
                                constructor: *mut Z3_func_decl,
                                tester: *mut Z3_func_decl,
                                accessors: *mut Z3_func_decl) -> ();
    pub fn Z3_mk_func_decl(c: Z3_context, s: Z3_symbol,
                           domain_size: ::libc::c_uint,
                           domain: *const Z3_sort, range: Z3_sort)
     -> Z3_func_decl;
    pub fn Z3_mk_app(c: Z3_context, d: Z3_func_decl, num_args: ::libc::c_uint,
                     args: *const Z3_ast) -> Z3_ast;
    pub fn Z3_mk_const(c: Z3_context, s: Z3_symbol, ty: Z3_sort) -> Z3_ast;
    pub fn Z3_mk_fresh_func_decl(c: Z3_context, prefix: Z3_string,
                                 domain_size: ::libc::c_uint,
                                 domain: *const Z3_sort, range: Z3_sort)
     -> Z3_func_decl;
    pub fn Z3_mk_fresh_const(c: Z3_context, prefix: Z3_string, ty: Z3_sort)
     -> Z3_ast;
    pub fn Z3_mk_true(c: Z3_context) -> Z3_ast;
    pub fn Z3_mk_false(c: Z3_context) -> Z3_ast;
    pub fn Z3_mk_eq(c: Z3_context, l: Z3_ast, r: Z3_ast) -> Z3_ast;
    pub fn Z3_mk_distinct(c: Z3_context, num_args: ::libc::c_uint,
                          args: *const Z3_ast) -> Z3_ast;
    pub fn Z3_mk_not(c: Z3_context, a: Z3_ast) -> Z3_ast;
    pub fn Z3_mk_ite(c: Z3_context, t1: Z3_ast, t2: Z3_ast, t3: Z3_ast)
     -> Z3_ast;
    pub fn Z3_mk_iff(c: Z3_context, t1: Z3_ast, t2: Z3_ast) -> Z3_ast;
    pub fn Z3_mk_implies(c: Z3_context, t1: Z3_ast, t2: Z3_ast) -> Z3_ast;
    pub fn Z3_mk_xor(c: Z3_context, t1: Z3_ast, t2: Z3_ast) -> Z3_ast;
    pub fn Z3_mk_and(c: Z3_context, num_args: ::libc::c_uint,
                     args: *const Z3_ast) -> Z3_ast;
    pub fn Z3_mk_or(c: Z3_context, num_args: ::libc::c_uint,
                    args: *const Z3_ast) -> Z3_ast;
    pub fn Z3_mk_add(c: Z3_context, num_args: ::libc::c_uint,
                     args: *const Z3_ast) -> Z3_ast;
    pub fn Z3_mk_mul(c: Z3_context, num_args: ::libc::c_uint,
                     args: *const Z3_ast) -> Z3_ast;
    pub fn Z3_mk_sub(c: Z3_context, num_args: ::libc::c_uint,
                     args: *const Z3_ast) -> Z3_ast;
    pub fn Z3_mk_unary_minus(c: Z3_context, arg: Z3_ast) -> Z3_ast;
    pub fn Z3_mk_div(c: Z3_context, arg1: Z3_ast, arg2: Z3_ast) -> Z3_ast;
    pub fn Z3_mk_mod(c: Z3_context, arg1: Z3_ast, arg2: Z3_ast) -> Z3_ast;
    pub fn Z3_mk_rem(c: Z3_context, arg1: Z3_ast, arg2: Z3_ast) -> Z3_ast;
    pub fn Z3_mk_power(c: Z3_context, arg1: Z3_ast, arg2: Z3_ast) -> Z3_ast;
    pub fn Z3_mk_lt(c: Z3_context, t1: Z3_ast, t2: Z3_ast) -> Z3_ast;
    pub fn Z3_mk_le(c: Z3_context, t1: Z3_ast, t2: Z3_ast) -> Z3_ast;
    pub fn Z3_mk_gt(c: Z3_context, t1: Z3_ast, t2: Z3_ast) -> Z3_ast;
    pub fn Z3_mk_ge(c: Z3_context, t1: Z3_ast, t2: Z3_ast) -> Z3_ast;
    pub fn Z3_mk_int2real(c: Z3_context, t1: Z3_ast) -> Z3_ast;
    pub fn Z3_mk_real2int(c: Z3_context, t1: Z3_ast) -> Z3_ast;
    pub fn Z3_mk_is_int(c: Z3_context, t1: Z3_ast) -> Z3_ast;
    pub fn Z3_mk_bvnot(c: Z3_context, t1: Z3_ast) -> Z3_ast;
    pub fn Z3_mk_bvredand(c: Z3_context, t1: Z3_ast) -> Z3_ast;
    pub fn Z3_mk_bvredor(c: Z3_context, t1: Z3_ast) -> Z3_ast;
    pub fn Z3_mk_bvand(c: Z3_context, t1: Z3_ast, t2: Z3_ast) -> Z3_ast;
    pub fn Z3_mk_bvor(c: Z3_context, t1: Z3_ast, t2: Z3_ast) -> Z3_ast;
    pub fn Z3_mk_bvxor(c: Z3_context, t1: Z3_ast, t2: Z3_ast) -> Z3_ast;
    pub fn Z3_mk_bvnand(c: Z3_context, t1: Z3_ast, t2: Z3_ast) -> Z3_ast;
    pub fn Z3_mk_bvnor(c: Z3_context, t1: Z3_ast, t2: Z3_ast) -> Z3_ast;
    pub fn Z3_mk_bvxnor(c: Z3_context, t1: Z3_ast, t2: Z3_ast) -> Z3_ast;
    pub fn Z3_mk_bvneg(c: Z3_context, t1: Z3_ast) -> Z3_ast;
    pub fn Z3_mk_bvadd(c: Z3_context, t1: Z3_ast, t2: Z3_ast) -> Z3_ast;
    pub fn Z3_mk_bvsub(c: Z3_context, t1: Z3_ast, t2: Z3_ast) -> Z3_ast;
    pub fn Z3_mk_bvmul(c: Z3_context, t1: Z3_ast, t2: Z3_ast) -> Z3_ast;
    pub fn Z3_mk_bvudiv(c: Z3_context, t1: Z3_ast, t2: Z3_ast) -> Z3_ast;
    pub fn Z3_mk_bvsdiv(c: Z3_context, t1: Z3_ast, t2: Z3_ast) -> Z3_ast;
    pub fn Z3_mk_bvurem(c: Z3_context, t1: Z3_ast, t2: Z3_ast) -> Z3_ast;
    pub fn Z3_mk_bvsrem(c: Z3_context, t1: Z3_ast, t2: Z3_ast) -> Z3_ast;
    pub fn Z3_mk_bvsmod(c: Z3_context, t1: Z3_ast, t2: Z3_ast) -> Z3_ast;
    pub fn Z3_mk_bvult(c: Z3_context, t1: Z3_ast, t2: Z3_ast) -> Z3_ast;
    pub fn Z3_mk_bvslt(c: Z3_context, t1: Z3_ast, t2: Z3_ast) -> Z3_ast;
    pub fn Z3_mk_bvule(c: Z3_context, t1: Z3_ast, t2: Z3_ast) -> Z3_ast;
    pub fn Z3_mk_bvsle(c: Z3_context, t1: Z3_ast, t2: Z3_ast) -> Z3_ast;
    pub fn Z3_mk_bvuge(c: Z3_context, t1: Z3_ast, t2: Z3_ast) -> Z3_ast;
    pub fn Z3_mk_bvsge(c: Z3_context, t1: Z3_ast, t2: Z3_ast) -> Z3_ast;
    pub fn Z3_mk_bvugt(c: Z3_context, t1: Z3_ast, t2: Z3_ast) -> Z3_ast;
    pub fn Z3_mk_bvsgt(c: Z3_context, t1: Z3_ast, t2: Z3_ast) -> Z3_ast;
    pub fn Z3_mk_concat(c: Z3_context, t1: Z3_ast, t2: Z3_ast) -> Z3_ast;
    pub fn Z3_mk_extract(c: Z3_context, high: ::libc::c_uint,
                         low: ::libc::c_uint, t1: Z3_ast) -> Z3_ast;
    pub fn Z3_mk_sign_ext(c: Z3_context, i: ::libc::c_uint, t1: Z3_ast)
     -> Z3_ast;
    pub fn Z3_mk_zero_ext(c: Z3_context, i: ::libc::c_uint, t1: Z3_ast)
     -> Z3_ast;
    pub fn Z3_mk_repeat(c: Z3_context, i: ::libc::c_uint, t1: Z3_ast)
     -> Z3_ast;
    pub fn Z3_mk_bvshl(c: Z3_context, t1: Z3_ast, t2: Z3_ast) -> Z3_ast;
    pub fn Z3_mk_bvlshr(c: Z3_context, t1: Z3_ast, t2: Z3_ast) -> Z3_ast;
    pub fn Z3_mk_bvashr(c: Z3_context, t1: Z3_ast, t2: Z3_ast) -> Z3_ast;
    pub fn Z3_mk_rotate_left(c: Z3_context, i: ::libc::c_uint, t1: Z3_ast)
     -> Z3_ast;
    pub fn Z3_mk_rotate_right(c: Z3_context, i: ::libc::c_uint, t1: Z3_ast)
     -> Z3_ast;
    pub fn Z3_mk_ext_rotate_left(c: Z3_context, t1: Z3_ast, t2: Z3_ast)
     -> Z3_ast;
    pub fn Z3_mk_ext_rotate_right(c: Z3_context, t1: Z3_ast, t2: Z3_ast)
     -> Z3_ast;
    pub fn Z3_mk_int2bv(c: Z3_context, n: ::libc::c_uint, t1: Z3_ast)
     -> Z3_ast;
    pub fn Z3_mk_bv2int(c: Z3_context, t1: Z3_ast, is_signed: Z3_bool)
     -> Z3_ast;
    pub fn Z3_mk_bvadd_no_overflow(c: Z3_context, t1: Z3_ast, t2: Z3_ast,
                                   is_signed: Z3_bool) -> Z3_ast;
    pub fn Z3_mk_bvadd_no_underflow(c: Z3_context, t1: Z3_ast, t2: Z3_ast)
     -> Z3_ast;
    pub fn Z3_mk_bvsub_no_overflow(c: Z3_context, t1: Z3_ast, t2: Z3_ast)
     -> Z3_ast;
    pub fn Z3_mk_bvsub_no_underflow(c: Z3_context, t1: Z3_ast, t2: Z3_ast,
                                    is_signed: Z3_bool) -> Z3_ast;
    pub fn Z3_mk_bvsdiv_no_overflow(c: Z3_context, t1: Z3_ast, t2: Z3_ast)
     -> Z3_ast;
    pub fn Z3_mk_bvneg_no_overflow(c: Z3_context, t1: Z3_ast) -> Z3_ast;
    pub fn Z3_mk_bvmul_no_overflow(c: Z3_context, t1: Z3_ast, t2: Z3_ast,
                                   is_signed: Z3_bool) -> Z3_ast;
    pub fn Z3_mk_bvmul_no_underflow(c: Z3_context, t1: Z3_ast, t2: Z3_ast)
     -> Z3_ast;
    pub fn Z3_mk_select(c: Z3_context, a: Z3_ast, i: Z3_ast) -> Z3_ast;
    pub fn Z3_mk_store(c: Z3_context, a: Z3_ast, i: Z3_ast, v: Z3_ast)
     -> Z3_ast;
    pub fn Z3_mk_const_array(c: Z3_context, domain: Z3_sort, v: Z3_ast)
     -> Z3_ast;
    pub fn Z3_mk_map(c: Z3_context, f: Z3_func_decl, n: ::libc::c_uint,
                     args: *const Z3_ast) -> Z3_ast;
    pub fn Z3_mk_array_default(c: Z3_context, array: Z3_ast) -> Z3_ast;
    pub fn Z3_mk_set_sort(c: Z3_context, ty: Z3_sort) -> Z3_sort;
    pub fn Z3_mk_empty_set(c: Z3_context, domain: Z3_sort) -> Z3_ast;
    pub fn Z3_mk_full_set(c: Z3_context, domain: Z3_sort) -> Z3_ast;
    pub fn Z3_mk_set_add(c: Z3_context, set: Z3_ast, elem: Z3_ast) -> Z3_ast;
    pub fn Z3_mk_set_del(c: Z3_context, set: Z3_ast, elem: Z3_ast) -> Z3_ast;
    pub fn Z3_mk_set_union(c: Z3_context, num_args: ::libc::c_uint,
                           args: *const Z3_ast) -> Z3_ast;
    pub fn Z3_mk_set_intersect(c: Z3_context, num_args: ::libc::c_uint,
                               args: *const Z3_ast) -> Z3_ast;
    pub fn Z3_mk_set_difference(c: Z3_context, arg1: Z3_ast, arg2: Z3_ast)
     -> Z3_ast;
    pub fn Z3_mk_set_complement(c: Z3_context, arg: Z3_ast) -> Z3_ast;
    pub fn Z3_mk_set_member(c: Z3_context, elem: Z3_ast, set: Z3_ast)
     -> Z3_ast;
    pub fn Z3_mk_set_subset(c: Z3_context, arg1: Z3_ast, arg2: Z3_ast)
     -> Z3_ast;
    pub fn Z3_mk_numeral(c: Z3_context, numeral: Z3_string, ty: Z3_sort)
     -> Z3_ast;
    pub fn Z3_mk_real(c: Z3_context, num: ::libc::c_int, den: ::libc::c_int)
     -> Z3_ast;
    pub fn Z3_mk_int(c: Z3_context, v: ::libc::c_int, ty: Z3_sort) -> Z3_ast;
    pub fn Z3_mk_unsigned_int(c: Z3_context, v: ::libc::c_uint, ty: Z3_sort)
     -> Z3_ast;
    pub fn Z3_mk_int64(c: Z3_context, v: ::libc::c_longlong, ty: Z3_sort)
     -> Z3_ast;
    pub fn Z3_mk_unsigned_int64(c: Z3_context, v: ::libc::c_ulonglong,
                                ty: Z3_sort) -> Z3_ast;
    pub fn Z3_mk_pattern(c: Z3_context, num_patterns: ::libc::c_uint,
                         terms: *const Z3_ast) -> Z3_pattern;
    pub fn Z3_mk_bound(c: Z3_context, index: ::libc::c_uint, ty: Z3_sort)
     -> Z3_ast;
    pub fn Z3_mk_forall(c: Z3_context, weight: ::libc::c_uint,
                        num_patterns: ::libc::c_uint,
                        patterns: *const Z3_pattern,
                        num_decls: ::libc::c_uint, sorts: *const Z3_sort,
                        decl_names: *const Z3_symbol, body: Z3_ast) -> Z3_ast;
    pub fn Z3_mk_exists(c: Z3_context, weight: ::libc::c_uint,
                        num_patterns: ::libc::c_uint,
                        patterns: *const Z3_pattern,
                        num_decls: ::libc::c_uint, sorts: *const Z3_sort,
                        decl_names: *const Z3_symbol, body: Z3_ast) -> Z3_ast;
    pub fn Z3_mk_quantifier(c: Z3_context, is_forall: Z3_bool,
                            weight: ::libc::c_uint,
                            num_patterns: ::libc::c_uint,
                            patterns: *const Z3_pattern,
                            num_decls: ::libc::c_uint, sorts: *const Z3_sort,
                            decl_names: *const Z3_symbol, body: Z3_ast)
     -> Z3_ast;
    pub fn Z3_mk_quantifier_ex(c: Z3_context, is_forall: Z3_bool,
                               weight: ::libc::c_uint,
                               quantifier_id: Z3_symbol, skolem_id: Z3_symbol,
                               num_patterns: ::libc::c_uint,
                               patterns: *const Z3_pattern,
                               num_no_patterns: ::libc::c_uint,
                               no_patterns: *const Z3_ast,
                               num_decls: ::libc::c_uint,
                               sorts: *const Z3_sort,
                               decl_names: *const Z3_symbol, body: Z3_ast)
     -> Z3_ast;
    pub fn Z3_mk_forall_const(c: Z3_context, weight: ::libc::c_uint,
                              num_bound: ::libc::c_uint, bound: *const Z3_app,
                              num_patterns: ::libc::c_uint,
                              patterns: *const Z3_pattern, body: Z3_ast)
     -> Z3_ast;
    pub fn Z3_mk_exists_const(c: Z3_context, weight: ::libc::c_uint,
                              num_bound: ::libc::c_uint, bound: *const Z3_app,
                              num_patterns: ::libc::c_uint,
                              patterns: *const Z3_pattern, body: Z3_ast)
     -> Z3_ast;
    pub fn Z3_mk_quantifier_const(c: Z3_context, is_forall: Z3_bool,
                                  weight: ::libc::c_uint,
                                  num_bound: ::libc::c_uint,
                                  bound: *const Z3_app,
                                  num_patterns: ::libc::c_uint,
                                  patterns: *const Z3_pattern, body: Z3_ast)
     -> Z3_ast;
    pub fn Z3_mk_quantifier_const_ex(c: Z3_context, is_forall: Z3_bool,
                                     weight: ::libc::c_uint,
                                     quantifier_id: Z3_symbol,
                                     skolem_id: Z3_symbol,
                                     num_bound: ::libc::c_uint,
                                     bound: *const Z3_app,
                                     num_patterns: ::libc::c_uint,
                                     patterns: *const Z3_pattern,
                                     num_no_patterns: ::libc::c_uint,
                                     no_patterns: *const Z3_ast, body: Z3_ast)
     -> Z3_ast;
    pub fn Z3_get_symbol_kind(c: Z3_context, s: Z3_symbol) -> Z3_symbol_kind;
    pub fn Z3_get_symbol_int(c: Z3_context, s: Z3_symbol) -> ::libc::c_int;
    pub fn Z3_get_symbol_string(c: Z3_context, s: Z3_symbol) -> Z3_string;
    pub fn Z3_get_sort_name(c: Z3_context, d: Z3_sort) -> Z3_symbol;
    pub fn Z3_get_sort_id(c: Z3_context, s: Z3_sort) -> ::libc::c_uint;
    pub fn Z3_sort_to_ast(c: Z3_context, s: Z3_sort) -> Z3_ast;
    pub fn Z3_is_eq_sort(c: Z3_context, s1: Z3_sort, s2: Z3_sort) -> Z3_bool;
    pub fn Z3_get_sort_kind(c: Z3_context, t: Z3_sort) -> Z3_sort_kind;
    pub fn Z3_get_bv_sort_size(c: Z3_context, t: Z3_sort) -> ::libc::c_uint;
    pub fn Z3_get_finite_domain_sort_size(c: Z3_context, s: Z3_sort,
                                          r: *mut ::libc::c_ulonglong)
     -> Z3_bool;
    pub fn Z3_get_array_sort_domain(c: Z3_context, t: Z3_sort) -> Z3_sort;
    pub fn Z3_get_array_sort_range(c: Z3_context, t: Z3_sort) -> Z3_sort;
    pub fn Z3_get_tuple_sort_mk_decl(c: Z3_context, t: Z3_sort)
     -> Z3_func_decl;
    pub fn Z3_get_tuple_sort_num_fields(c: Z3_context, t: Z3_sort)
     -> ::libc::c_uint;
    pub fn Z3_get_tuple_sort_field_decl(c: Z3_context, t: Z3_sort,
                                        i: ::libc::c_uint) -> Z3_func_decl;
    pub fn Z3_get_datatype_sort_num_constructors(c: Z3_context, t: Z3_sort)
     -> ::libc::c_uint;
    pub fn Z3_get_datatype_sort_constructor(c: Z3_context, t: Z3_sort,
                                            idx: ::libc::c_uint)
     -> Z3_func_decl;
    pub fn Z3_get_datatype_sort_recognizer(c: Z3_context, t: Z3_sort,
                                           idx: ::libc::c_uint)
     -> Z3_func_decl;
    pub fn Z3_get_datatype_sort_constructor_accessor(c: Z3_context,
                                                     t: Z3_sort,
                                                     idx_c: ::libc::c_uint,
                                                     idx_a: ::libc::c_uint)
     -> Z3_func_decl;
    pub fn Z3_datatype_update_field(c: Z3_context, field_access: Z3_func_decl,
                                    t: Z3_ast, value: Z3_ast) -> Z3_ast;
    pub fn Z3_get_relation_arity(c: Z3_context, s: Z3_sort) -> ::libc::c_uint;
    pub fn Z3_get_relation_column(c: Z3_context, s: Z3_sort,
                                  col: ::libc::c_uint) -> Z3_sort;
    pub fn Z3_mk_atmost(c: Z3_context, num_args: ::libc::c_uint,
                        args: *const Z3_ast, k: ::libc::c_uint) -> Z3_ast;
    pub fn Z3_mk_pble(c: Z3_context, num_args: ::libc::c_uint,
                      args: *const Z3_ast, coeffs: *mut ::libc::c_int,
                      k: ::libc::c_int) -> Z3_ast;
    pub fn Z3_func_decl_to_ast(c: Z3_context, f: Z3_func_decl) -> Z3_ast;
    pub fn Z3_is_eq_func_decl(c: Z3_context, f1: Z3_func_decl,
                              f2: Z3_func_decl) -> Z3_bool;
    pub fn Z3_get_func_decl_id(c: Z3_context, f: Z3_func_decl)
     -> ::libc::c_uint;
    pub fn Z3_get_decl_name(c: Z3_context, d: Z3_func_decl) -> Z3_symbol;
    pub fn Z3_get_decl_kind(c: Z3_context, d: Z3_func_decl) -> Z3_decl_kind;
    pub fn Z3_get_domain_size(c: Z3_context, d: Z3_func_decl)
     -> ::libc::c_uint;
    pub fn Z3_get_arity(c: Z3_context, d: Z3_func_decl) -> ::libc::c_uint;
    pub fn Z3_get_domain(c: Z3_context, d: Z3_func_decl, i: ::libc::c_uint)
     -> Z3_sort;
    pub fn Z3_get_range(c: Z3_context, d: Z3_func_decl) -> Z3_sort;
    pub fn Z3_get_decl_num_parameters(c: Z3_context, d: Z3_func_decl)
     -> ::libc::c_uint;
    pub fn Z3_get_decl_parameter_kind(c: Z3_context, d: Z3_func_decl,
                                      idx: ::libc::c_uint)
     -> Z3_parameter_kind;
    pub fn Z3_get_decl_int_parameter(c: Z3_context, d: Z3_func_decl,
                                     idx: ::libc::c_uint) -> ::libc::c_int;
    pub fn Z3_get_decl_double_parameter(c: Z3_context, d: Z3_func_decl,
                                        idx: ::libc::c_uint)
     -> ::libc::c_double;
    pub fn Z3_get_decl_symbol_parameter(c: Z3_context, d: Z3_func_decl,
                                        idx: ::libc::c_uint) -> Z3_symbol;
    pub fn Z3_get_decl_sort_parameter(c: Z3_context, d: Z3_func_decl,
                                      idx: ::libc::c_uint) -> Z3_sort;
    pub fn Z3_get_decl_ast_parameter(c: Z3_context, d: Z3_func_decl,
                                     idx: ::libc::c_uint) -> Z3_ast;
    pub fn Z3_get_decl_func_decl_parameter(c: Z3_context, d: Z3_func_decl,
                                           idx: ::libc::c_uint)
     -> Z3_func_decl;
    pub fn Z3_get_decl_rational_parameter(c: Z3_context, d: Z3_func_decl,
                                          idx: ::libc::c_uint) -> Z3_string;
    pub fn Z3_app_to_ast(c: Z3_context, a: Z3_app) -> Z3_ast;
    pub fn Z3_get_app_decl(c: Z3_context, a: Z3_app) -> Z3_func_decl;
    pub fn Z3_get_app_num_args(c: Z3_context, a: Z3_app) -> ::libc::c_uint;
    pub fn Z3_get_app_arg(c: Z3_context, a: Z3_app, i: ::libc::c_uint)
     -> Z3_ast;
    pub fn Z3_is_eq_ast(c: Z3_context, t1: Z3_ast, t2: Z3_ast) -> Z3_bool;
    pub fn Z3_get_ast_id(c: Z3_context, t: Z3_ast) -> ::libc::c_uint;
    pub fn Z3_get_ast_hash(c: Z3_context, a: Z3_ast) -> ::libc::c_uint;
    pub fn Z3_get_sort(c: Z3_context, a: Z3_ast) -> Z3_sort;
    pub fn Z3_is_well_sorted(c: Z3_context, t: Z3_ast) -> Z3_bool;
    pub fn Z3_get_bool_value(c: Z3_context, a: Z3_ast) -> Z3_lbool;
    pub fn Z3_get_ast_kind(c: Z3_context, a: Z3_ast) -> Z3_ast_kind;
    pub fn Z3_is_app(c: Z3_context, a: Z3_ast) -> Z3_bool;
    pub fn Z3_is_numeral_ast(c: Z3_context, a: Z3_ast) -> Z3_bool;
    pub fn Z3_is_algebraic_number(c: Z3_context, a: Z3_ast) -> Z3_bool;
    pub fn Z3_to_app(c: Z3_context, a: Z3_ast) -> Z3_app;
    pub fn Z3_to_func_decl(c: Z3_context, a: Z3_ast) -> Z3_func_decl;
    pub fn Z3_get_numeral_string(c: Z3_context, a: Z3_ast) -> Z3_string;
    pub fn Z3_get_numeral_decimal_string(c: Z3_context, a: Z3_ast,
                                         precision: ::libc::c_uint)
     -> Z3_string;
    pub fn Z3_get_numerator(c: Z3_context, a: Z3_ast) -> Z3_ast;
    pub fn Z3_get_denominator(c: Z3_context, a: Z3_ast) -> Z3_ast;
    pub fn Z3_get_numeral_small(c: Z3_context, a: Z3_ast,
                                num: *mut ::libc::c_longlong,
                                den: *mut ::libc::c_longlong) -> Z3_bool;
    pub fn Z3_get_numeral_int(c: Z3_context, v: Z3_ast, i: *mut ::libc::c_int)
     -> Z3_bool;
    pub fn Z3_get_numeral_uint(c: Z3_context, v: Z3_ast,
                               u: *mut ::libc::c_uint) -> Z3_bool;
    pub fn Z3_get_numeral_uint64(c: Z3_context, v: Z3_ast,
                                 u: *mut ::libc::c_ulonglong) -> Z3_bool;
    pub fn Z3_get_numeral_int64(c: Z3_context, v: Z3_ast,
                                i: *mut ::libc::c_longlong) -> Z3_bool;
    pub fn Z3_get_numeral_rational_int64(c: Z3_context, v: Z3_ast,
                                         num: *mut ::libc::c_longlong,
                                         den: *mut ::libc::c_longlong)
     -> Z3_bool;
    pub fn Z3_get_algebraic_number_lower(c: Z3_context, a: Z3_ast,
                                         precision: ::libc::c_uint) -> Z3_ast;
    pub fn Z3_get_algebraic_number_upper(c: Z3_context, a: Z3_ast,
                                         precision: ::libc::c_uint) -> Z3_ast;
    pub fn Z3_pattern_to_ast(c: Z3_context, p: Z3_pattern) -> Z3_ast;
    pub fn Z3_get_pattern_num_terms(c: Z3_context, p: Z3_pattern)
     -> ::libc::c_uint;
    pub fn Z3_get_pattern(c: Z3_context, p: Z3_pattern, idx: ::libc::c_uint)
     -> Z3_ast;
    pub fn Z3_get_index_value(c: Z3_context, a: Z3_ast) -> ::libc::c_uint;
    pub fn Z3_is_quantifier_forall(c: Z3_context, a: Z3_ast) -> Z3_bool;
    pub fn Z3_get_quantifier_weight(c: Z3_context, a: Z3_ast)
     -> ::libc::c_uint;
    pub fn Z3_get_quantifier_num_patterns(c: Z3_context, a: Z3_ast)
     -> ::libc::c_uint;
    pub fn Z3_get_quantifier_pattern_ast(c: Z3_context, a: Z3_ast,
                                         i: ::libc::c_uint) -> Z3_pattern;
    pub fn Z3_get_quantifier_num_no_patterns(c: Z3_context, a: Z3_ast)
     -> ::libc::c_uint;
    pub fn Z3_get_quantifier_no_pattern_ast(c: Z3_context, a: Z3_ast,
                                            i: ::libc::c_uint) -> Z3_ast;
    pub fn Z3_get_quantifier_num_bound(c: Z3_context, a: Z3_ast)
     -> ::libc::c_uint;
    pub fn Z3_get_quantifier_bound_name(c: Z3_context, a: Z3_ast,
                                        i: ::libc::c_uint) -> Z3_symbol;
    pub fn Z3_get_quantifier_bound_sort(c: Z3_context, a: Z3_ast,
                                        i: ::libc::c_uint) -> Z3_sort;
    pub fn Z3_get_quantifier_body(c: Z3_context, a: Z3_ast) -> Z3_ast;
    pub fn Z3_simplify(c: Z3_context, a: Z3_ast) -> Z3_ast;
    pub fn Z3_simplify_ex(c: Z3_context, a: Z3_ast, p: Z3_params) -> Z3_ast;
    pub fn Z3_simplify_get_help(c: Z3_context) -> Z3_string;
    pub fn Z3_simplify_get_param_descrs(c: Z3_context) -> Z3_param_descrs;
    pub fn Z3_update_term(c: Z3_context, a: Z3_ast, num_args: ::libc::c_uint,
                          args: *const Z3_ast) -> Z3_ast;
    pub fn Z3_substitute(c: Z3_context, a: Z3_ast, num_exprs: ::libc::c_uint,
                         from: *const Z3_ast, to: *const Z3_ast) -> Z3_ast;
    pub fn Z3_substitute_vars(c: Z3_context, a: Z3_ast,
                              num_exprs: ::libc::c_uint, to: *const Z3_ast)
     -> Z3_ast;
    pub fn Z3_translate(source: Z3_context, a: Z3_ast, target: Z3_context)
     -> Z3_ast;
    pub fn Z3_model_inc_ref(c: Z3_context, m: Z3_model) -> ();
    pub fn Z3_model_dec_ref(c: Z3_context, m: Z3_model) -> ();
    pub fn Z3_model_eval(c: Z3_context, m: Z3_model, t: Z3_ast,
                         model_completion: Z3_bool, v: *mut Z3_ast)
     -> Z3_bool;
    pub fn Z3_model_get_const_interp(c: Z3_context, m: Z3_model,
                                     a: Z3_func_decl) -> Z3_ast;
    pub fn Z3_model_has_interp(c: Z3_context, m: Z3_model, a: Z3_func_decl)
     -> Z3_bool;
    pub fn Z3_model_get_func_interp(c: Z3_context, m: Z3_model,
                                    f: Z3_func_decl) -> Z3_func_interp;
    pub fn Z3_model_get_num_consts(c: Z3_context, m: Z3_model)
     -> ::libc::c_uint;
    pub fn Z3_model_get_const_decl(c: Z3_context, m: Z3_model,
                                   i: ::libc::c_uint) -> Z3_func_decl;
    pub fn Z3_model_get_num_funcs(c: Z3_context, m: Z3_model)
     -> ::libc::c_uint;
    pub fn Z3_model_get_func_decl(c: Z3_context, m: Z3_model,
                                  i: ::libc::c_uint) -> Z3_func_decl;
    pub fn Z3_model_get_num_sorts(c: Z3_context, m: Z3_model)
     -> ::libc::c_uint;
    pub fn Z3_model_get_sort(c: Z3_context, m: Z3_model, i: ::libc::c_uint)
     -> Z3_sort;
    pub fn Z3_model_get_sort_universe(c: Z3_context, m: Z3_model, s: Z3_sort)
     -> Z3_ast_vector;
    pub fn Z3_is_as_array(c: Z3_context, a: Z3_ast) -> Z3_bool;
    pub fn Z3_get_as_array_func_decl(c: Z3_context, a: Z3_ast)
     -> Z3_func_decl;
    pub fn Z3_func_interp_inc_ref(c: Z3_context, f: Z3_func_interp) -> ();
    pub fn Z3_func_interp_dec_ref(c: Z3_context, f: Z3_func_interp) -> ();
    pub fn Z3_func_interp_get_num_entries(c: Z3_context, f: Z3_func_interp)
     -> ::libc::c_uint;
    pub fn Z3_func_interp_get_entry(c: Z3_context, f: Z3_func_interp,
                                    i: ::libc::c_uint) -> Z3_func_entry;
    pub fn Z3_func_interp_get_else(c: Z3_context, f: Z3_func_interp)
     -> Z3_ast;
    pub fn Z3_func_interp_get_arity(c: Z3_context, f: Z3_func_interp)
     -> ::libc::c_uint;
    pub fn Z3_func_entry_inc_ref(c: Z3_context, e: Z3_func_entry) -> ();
    pub fn Z3_func_entry_dec_ref(c: Z3_context, e: Z3_func_entry) -> ();
    pub fn Z3_func_entry_get_value(c: Z3_context, e: Z3_func_entry) -> Z3_ast;
    pub fn Z3_func_entry_get_num_args(c: Z3_context, e: Z3_func_entry)
     -> ::libc::c_uint;
    pub fn Z3_func_entry_get_arg(c: Z3_context, e: Z3_func_entry,
                                 i: ::libc::c_uint) -> Z3_ast;
    pub fn Z3_open_log(filename: Z3_string) -> Z3_bool;
    pub fn Z3_append_log(string: Z3_string) -> ();
    pub fn Z3_close_log() -> ();
    pub fn Z3_toggle_warning_messages(enabled: Z3_bool) -> ();
    pub fn Z3_set_ast_print_mode(c: Z3_context, mode: Z3_ast_print_mode)
     -> ();
    pub fn Z3_ast_to_string(c: Z3_context, a: Z3_ast) -> Z3_string;
    pub fn Z3_pattern_to_string(c: Z3_context, p: Z3_pattern) -> Z3_string;
    pub fn Z3_sort_to_string(c: Z3_context, s: Z3_sort) -> Z3_string;
    pub fn Z3_func_decl_to_string(c: Z3_context, d: Z3_func_decl)
     -> Z3_string;
    pub fn Z3_model_to_string(c: Z3_context, m: Z3_model) -> Z3_string;
    pub fn Z3_benchmark_to_smtlib_string(c: Z3_context, name: Z3_string,
                                         logic: Z3_string, status: Z3_string,
                                         attributes: Z3_string,
                                         num_assumptions: ::libc::c_uint,
                                         assumptions: *const Z3_ast,
                                         formula: Z3_ast) -> Z3_string;
    pub fn Z3_parse_smtlib2_string(c: Z3_context, str: Z3_string,
                                   num_sorts: ::libc::c_uint,
                                   sort_names: *const Z3_symbol,
                                   sorts: *const Z3_sort,
                                   num_decls: ::libc::c_uint,
                                   decl_names: *const Z3_symbol,
                                   decls: *const Z3_func_decl) -> Z3_ast;
    pub fn Z3_parse_smtlib2_file(c: Z3_context, file_name: Z3_string,
                                 num_sorts: ::libc::c_uint,
                                 sort_names: *const Z3_symbol,
                                 sorts: *const Z3_sort,
                                 num_decls: ::libc::c_uint,
                                 decl_names: *const Z3_symbol,
                                 decls: *const Z3_func_decl) -> Z3_ast;
    pub fn Z3_parse_smtlib_string(c: Z3_context, str: Z3_string,
                                  num_sorts: ::libc::c_uint,
                                  sort_names: *const Z3_symbol,
                                  sorts: *const Z3_sort,
                                  num_decls: ::libc::c_uint,
                                  decl_names: *const Z3_symbol,
                                  decls: *const Z3_func_decl) -> ();
    pub fn Z3_parse_smtlib_file(c: Z3_context, file_name: Z3_string,
                                num_sorts: ::libc::c_uint,
                                sort_names: *const Z3_symbol,
                                sorts: *const Z3_sort,
                                num_decls: ::libc::c_uint,
                                decl_names: *const Z3_symbol,
                                decls: *const Z3_func_decl) -> ();
    pub fn Z3_get_smtlib_num_formulas(c: Z3_context) -> ::libc::c_uint;
    pub fn Z3_get_smtlib_formula(c: Z3_context, i: ::libc::c_uint) -> Z3_ast;
    pub fn Z3_get_smtlib_num_assumptions(c: Z3_context) -> ::libc::c_uint;
    pub fn Z3_get_smtlib_assumption(c: Z3_context, i: ::libc::c_uint)
     -> Z3_ast;
    pub fn Z3_get_smtlib_num_decls(c: Z3_context) -> ::libc::c_uint;
    pub fn Z3_get_smtlib_decl(c: Z3_context, i: ::libc::c_uint)
     -> Z3_func_decl;
    pub fn Z3_get_smtlib_num_sorts(c: Z3_context) -> ::libc::c_uint;
    pub fn Z3_get_smtlib_sort(c: Z3_context, i: ::libc::c_uint) -> Z3_sort;
    pub fn Z3_get_smtlib_error(c: Z3_context) -> Z3_string;
    pub fn Z3_get_error_code(c: Z3_context) -> Z3_error_code;
    pub fn Z3_set_error_handler(c: Z3_context, h: Z3_error_handler) -> ();
    pub fn Z3_set_error(c: Z3_context, e: Z3_error_code) -> ();
    pub fn Z3_get_error_msg(err: Z3_error_code) -> Z3_string;
    pub fn Z3_get_error_msg_ex(c: Z3_context, err: Z3_error_code)
     -> Z3_string;
    pub fn Z3_get_version(major: *mut ::libc::c_uint,
                          minor: *mut ::libc::c_uint,
                          build_number: *mut ::libc::c_uint,
                          revision_number: *mut ::libc::c_uint) -> ();
    pub fn Z3_enable_trace(tag: Z3_string) -> ();
    pub fn Z3_disable_trace(tag: Z3_string) -> ();
    pub fn Z3_reset_memory() -> ();
    pub fn Z3_finalize_memory() -> ();
    pub fn Z3_mk_theory(c: Z3_context, th_name: Z3_string,
                        data: Z3_theory_data) -> Z3_theory;
    pub fn Z3_theory_get_ext_data(t: Z3_theory) -> Z3_theory_data;
    pub fn Z3_theory_mk_sort(c: Z3_context, t: Z3_theory, s: Z3_symbol)
     -> Z3_sort;
    pub fn Z3_theory_mk_value(c: Z3_context, t: Z3_theory, n: Z3_symbol,
                              s: Z3_sort) -> Z3_ast;
    pub fn Z3_theory_mk_constant(c: Z3_context, t: Z3_theory, n: Z3_symbol,
                                 s: Z3_sort) -> Z3_ast;
    pub fn Z3_theory_mk_func_decl(c: Z3_context, t: Z3_theory, n: Z3_symbol,
                                  domain_size: ::libc::c_uint,
                                  domain: *const Z3_sort, range: Z3_sort)
     -> Z3_func_decl;
    pub fn Z3_theory_get_context(t: Z3_theory) -> Z3_context;
    pub fn Z3_set_delete_callback(t: Z3_theory, f: Z3_theory_callback_fptr)
     -> ();
    pub fn Z3_set_reduce_app_callback(t: Z3_theory,
                                      f: Z3_reduce_app_callback_fptr) -> ();
    pub fn Z3_set_reduce_eq_callback(t: Z3_theory,
                                     f: Z3_reduce_eq_callback_fptr) -> ();
    pub fn Z3_set_reduce_distinct_callback(t: Z3_theory,
                                           f:
                                               Z3_reduce_distinct_callback_fptr)
     -> ();
    pub fn Z3_set_new_app_callback(t: Z3_theory,
                                   f: Z3_theory_ast_callback_fptr) -> ();
    pub fn Z3_set_new_elem_callback(t: Z3_theory,
                                    f: Z3_theory_ast_callback_fptr) -> ();
    pub fn Z3_set_init_search_callback(t: Z3_theory,
                                       f: Z3_theory_callback_fptr) -> ();
    pub fn Z3_set_push_callback(t: Z3_theory, f: Z3_theory_callback_fptr)
     -> ();
    pub fn Z3_set_pop_callback(t: Z3_theory, f: Z3_theory_callback_fptr)
     -> ();
    pub fn Z3_set_restart_callback(t: Z3_theory, f: Z3_theory_callback_fptr)
     -> ();
    pub fn Z3_set_reset_callback(t: Z3_theory, f: Z3_theory_callback_fptr)
     -> ();
    pub fn Z3_set_final_check_callback(t: Z3_theory,
                                       f: Z3_theory_final_check_callback_fptr)
     -> ();
    pub fn Z3_set_new_eq_callback(t: Z3_theory,
                                  f: Z3_theory_ast_ast_callback_fptr) -> ();
    pub fn Z3_set_new_diseq_callback(t: Z3_theory,
                                     f: Z3_theory_ast_ast_callback_fptr)
     -> ();
    pub fn Z3_set_new_assignment_callback(t: Z3_theory,
                                          f: Z3_theory_ast_bool_callback_fptr)
     -> ();
    pub fn Z3_set_new_relevant_callback(t: Z3_theory,
                                        f: Z3_theory_ast_callback_fptr) -> ();
    pub fn Z3_theory_assert_axiom(t: Z3_theory, ax: Z3_ast) -> ();
    pub fn Z3_theory_assume_eq(t: Z3_theory, lhs: Z3_ast, rhs: Z3_ast) -> ();
    pub fn Z3_theory_enable_axiom_simplification(t: Z3_theory, flag: Z3_bool)
     -> ();
    pub fn Z3_theory_get_eqc_root(t: Z3_theory, n: Z3_ast) -> Z3_ast;
    pub fn Z3_theory_get_eqc_next(t: Z3_theory, n: Z3_ast) -> Z3_ast;
    pub fn Z3_theory_get_num_parents(t: Z3_theory, n: Z3_ast)
     -> ::libc::c_uint;
    pub fn Z3_theory_get_parent(t: Z3_theory, n: Z3_ast, i: ::libc::c_uint)
     -> Z3_ast;
    pub fn Z3_theory_is_value(t: Z3_theory, n: Z3_ast) -> Z3_bool;
    pub fn Z3_theory_is_decl(t: Z3_theory, d: Z3_func_decl) -> Z3_bool;
    pub fn Z3_theory_get_num_elems(t: Z3_theory) -> ::libc::c_uint;
    pub fn Z3_theory_get_elem(t: Z3_theory, i: ::libc::c_uint) -> Z3_ast;
    pub fn Z3_theory_get_num_apps(t: Z3_theory) -> ::libc::c_uint;
    pub fn Z3_theory_get_app(t: Z3_theory, i: ::libc::c_uint) -> Z3_ast;
    pub fn Z3_mk_fixedpoint(c: Z3_context) -> Z3_fixedpoint;
    pub fn Z3_fixedpoint_inc_ref(c: Z3_context, d: Z3_fixedpoint) -> ();
    pub fn Z3_fixedpoint_dec_ref(c: Z3_context, d: Z3_fixedpoint) -> ();
    pub fn Z3_fixedpoint_add_rule(c: Z3_context, d: Z3_fixedpoint,
                                  rule: Z3_ast, name: Z3_symbol) -> ();
    pub fn Z3_fixedpoint_add_fact(c: Z3_context, d: Z3_fixedpoint,
                                  r: Z3_func_decl, num_args: ::libc::c_uint,
                                  args: *mut ::libc::c_uint) -> ();
    pub fn Z3_fixedpoint_assert(c: Z3_context, d: Z3_fixedpoint,
                                axiom: Z3_ast) -> ();
    pub fn Z3_fixedpoint_query(c: Z3_context, d: Z3_fixedpoint, query: Z3_ast)
     -> Z3_lbool;
    pub fn Z3_fixedpoint_query_relations(c: Z3_context, d: Z3_fixedpoint,
                                         num_relations: ::libc::c_uint,
                                         relations: *const Z3_func_decl)
     -> Z3_lbool;
    pub fn Z3_fixedpoint_get_answer(c: Z3_context, d: Z3_fixedpoint)
     -> Z3_ast;
    pub fn Z3_fixedpoint_get_reason_unknown(c: Z3_context, d: Z3_fixedpoint)
     -> Z3_string;
    pub fn Z3_fixedpoint_update_rule(c: Z3_context, d: Z3_fixedpoint,
                                     a: Z3_ast, name: Z3_symbol) -> ();
    pub fn Z3_fixedpoint_get_num_levels(c: Z3_context, d: Z3_fixedpoint,
                                        pred: Z3_func_decl) -> ::libc::c_uint;
    pub fn Z3_fixedpoint_get_cover_delta(c: Z3_context, d: Z3_fixedpoint,
                                         level: ::libc::c_int,
                                         pred: Z3_func_decl) -> Z3_ast;
    pub fn Z3_fixedpoint_add_cover(c: Z3_context, d: Z3_fixedpoint,
                                   level: ::libc::c_int, pred: Z3_func_decl,
                                   property: Z3_ast) -> ();
    pub fn Z3_fixedpoint_get_statistics(c: Z3_context, d: Z3_fixedpoint)
     -> Z3_stats;
    pub fn Z3_fixedpoint_register_relation(c: Z3_context, d: Z3_fixedpoint,
                                           f: Z3_func_decl) -> ();
    pub fn Z3_fixedpoint_set_predicate_representation(c: Z3_context,
                                                      d: Z3_fixedpoint,
                                                      f: Z3_func_decl,
                                                      num_relations:
                                                          ::libc::c_uint,
                                                      relation_kinds:
                                                          *const Z3_symbol)
     -> ();
    pub fn Z3_fixedpoint_get_rules(c: Z3_context, f: Z3_fixedpoint)
     -> Z3_ast_vector;
    pub fn Z3_fixedpoint_get_assertions(c: Z3_context, f: Z3_fixedpoint)
     -> Z3_ast_vector;
    pub fn Z3_fixedpoint_set_params(c: Z3_context, f: Z3_fixedpoint,
                                    p: Z3_params) -> ();
    pub fn Z3_fixedpoint_get_help(c: Z3_context, f: Z3_fixedpoint)
     -> Z3_string;
    pub fn Z3_fixedpoint_get_param_descrs(c: Z3_context, f: Z3_fixedpoint)
     -> Z3_param_descrs;
    pub fn Z3_fixedpoint_to_string(c: Z3_context, f: Z3_fixedpoint,
                                   num_queries: ::libc::c_uint,
                                   queries: *mut Z3_ast) -> Z3_string;
    pub fn Z3_fixedpoint_from_string(c: Z3_context, f: Z3_fixedpoint,
                                     s: Z3_string) -> Z3_ast_vector;
    pub fn Z3_fixedpoint_from_file(c: Z3_context, f: Z3_fixedpoint,
                                   s: Z3_string) -> Z3_ast_vector;
    pub fn Z3_fixedpoint_push(c: Z3_context, d: Z3_fixedpoint) -> ();
    pub fn Z3_fixedpoint_pop(c: Z3_context, d: Z3_fixedpoint) -> ();
    pub fn Z3_fixedpoint_init(c: Z3_context, d: Z3_fixedpoint,
                              state: *mut ::libc::c_void) -> ();
    pub fn Z3_fixedpoint_set_reduce_assign_callback(c: Z3_context,
                                                    d: Z3_fixedpoint,
                                                    cb:
                                                        Z3_fixedpoint_reduce_assign_callback_fptr)
     -> ();
    pub fn Z3_fixedpoint_set_reduce_app_callback(c: Z3_context,
                                                 d: Z3_fixedpoint,
                                                 cb:
                                                     Z3_fixedpoint_reduce_app_callback_fptr)
     -> ();
    pub fn Z3_mk_optimize(c: Z3_context) -> Z3_optimize;
    pub fn Z3_optimize_inc_ref(c: Z3_context, d: Z3_optimize) -> ();
    pub fn Z3_optimize_dec_ref(c: Z3_context, d: Z3_optimize) -> ();
    pub fn Z3_optimize_assert(c: Z3_context, o: Z3_optimize, a: Z3_ast) -> ();
    pub fn Z3_optimize_assert_soft(c: Z3_context, o: Z3_optimize, a: Z3_ast,
                                   weight: Z3_string, id: Z3_symbol)
     -> ::libc::c_uint;
    pub fn Z3_optimize_maximize(c: Z3_context, o: Z3_optimize, t: Z3_ast)
     -> ::libc::c_uint;
    pub fn Z3_optimize_minimize(c: Z3_context, o: Z3_optimize, t: Z3_ast)
     -> ::libc::c_uint;
    pub fn Z3_optimize_push(c: Z3_context, d: Z3_optimize) -> ();
    pub fn Z3_optimize_pop(c: Z3_context, d: Z3_optimize) -> ();
    pub fn Z3_optimize_check(c: Z3_context, o: Z3_optimize) -> Z3_lbool;
    pub fn Z3_optimize_get_model(c: Z3_context, o: Z3_optimize) -> Z3_model;
    pub fn Z3_optimize_set_params(c: Z3_context, o: Z3_optimize, p: Z3_params)
     -> ();
    pub fn Z3_optimize_get_param_descrs(c: Z3_context, o: Z3_optimize)
     -> Z3_param_descrs;
    pub fn Z3_optimize_get_lower(c: Z3_context, o: Z3_optimize,
                                 idx: ::libc::c_uint) -> Z3_ast;
    pub fn Z3_optimize_get_upper(c: Z3_context, o: Z3_optimize,
                                 idx: ::libc::c_uint) -> Z3_ast;
    pub fn Z3_optimize_to_string(c: Z3_context, o: Z3_optimize) -> Z3_string;
    pub fn Z3_optimize_get_help(c: Z3_context, t: Z3_optimize) -> Z3_string;
    pub fn Z3_optimize_get_statistics(c: Z3_context, d: Z3_optimize)
     -> Z3_stats;
    pub fn Z3_mk_ast_vector(c: Z3_context) -> Z3_ast_vector;
    pub fn Z3_ast_vector_inc_ref(c: Z3_context, v: Z3_ast_vector) -> ();
    pub fn Z3_ast_vector_dec_ref(c: Z3_context, v: Z3_ast_vector) -> ();
    pub fn Z3_ast_vector_size(c: Z3_context, v: Z3_ast_vector)
     -> ::libc::c_uint;
    pub fn Z3_ast_vector_get(c: Z3_context, v: Z3_ast_vector,
                             i: ::libc::c_uint) -> Z3_ast;
    pub fn Z3_ast_vector_set(c: Z3_context, v: Z3_ast_vector,
                             i: ::libc::c_uint, a: Z3_ast) -> ();
    pub fn Z3_ast_vector_resize(c: Z3_context, v: Z3_ast_vector,
                                n: ::libc::c_uint) -> ();
    pub fn Z3_ast_vector_push(c: Z3_context, v: Z3_ast_vector, a: Z3_ast)
     -> ();
    pub fn Z3_ast_vector_translate(s: Z3_context, v: Z3_ast_vector,
                                   t: Z3_context) -> Z3_ast_vector;
    pub fn Z3_ast_vector_to_string(c: Z3_context, v: Z3_ast_vector)
     -> Z3_string;
    pub fn Z3_mk_ast_map(c: Z3_context) -> Z3_ast_map;
    pub fn Z3_ast_map_inc_ref(c: Z3_context, m: Z3_ast_map) -> ();
    pub fn Z3_ast_map_dec_ref(c: Z3_context, m: Z3_ast_map) -> ();
    pub fn Z3_ast_map_contains(c: Z3_context, m: Z3_ast_map, k: Z3_ast)
     -> Z3_bool;
    pub fn Z3_ast_map_find(c: Z3_context, m: Z3_ast_map, k: Z3_ast) -> Z3_ast;
    pub fn Z3_ast_map_insert(c: Z3_context, m: Z3_ast_map, k: Z3_ast,
                             v: Z3_ast) -> ();
    pub fn Z3_ast_map_erase(c: Z3_context, m: Z3_ast_map, k: Z3_ast) -> ();
    pub fn Z3_ast_map_reset(c: Z3_context, m: Z3_ast_map) -> ();
    pub fn Z3_ast_map_size(c: Z3_context, m: Z3_ast_map) -> ::libc::c_uint;
    pub fn Z3_ast_map_keys(c: Z3_context, m: Z3_ast_map) -> Z3_ast_vector;
    pub fn Z3_ast_map_to_string(c: Z3_context, m: Z3_ast_map) -> Z3_string;
    pub fn Z3_mk_goal(c: Z3_context, models: Z3_bool, unsat_cores: Z3_bool,
                      proofs: Z3_bool) -> Z3_goal;
    pub fn Z3_goal_inc_ref(c: Z3_context, g: Z3_goal) -> ();
    pub fn Z3_goal_dec_ref(c: Z3_context, g: Z3_goal) -> ();
    pub fn Z3_goal_precision(c: Z3_context, g: Z3_goal) -> Z3_goal_prec;
    pub fn Z3_goal_assert(c: Z3_context, g: Z3_goal, a: Z3_ast) -> ();
    pub fn Z3_goal_inconsistent(c: Z3_context, g: Z3_goal) -> Z3_bool;
    pub fn Z3_goal_depth(c: Z3_context, g: Z3_goal) -> ::libc::c_uint;
    pub fn Z3_goal_reset(c: Z3_context, g: Z3_goal) -> ();
    pub fn Z3_goal_size(c: Z3_context, g: Z3_goal) -> ::libc::c_uint;
    pub fn Z3_goal_formula(c: Z3_context, g: Z3_goal, idx: ::libc::c_uint)
     -> Z3_ast;
    pub fn Z3_goal_num_exprs(c: Z3_context, g: Z3_goal) -> ::libc::c_uint;
    pub fn Z3_goal_is_decided_sat(c: Z3_context, g: Z3_goal) -> Z3_bool;
    pub fn Z3_goal_is_decided_unsat(c: Z3_context, g: Z3_goal) -> Z3_bool;
    pub fn Z3_goal_translate(source: Z3_context, g: Z3_goal,
                             target: Z3_context) -> Z3_goal;
    pub fn Z3_goal_to_string(c: Z3_context, g: Z3_goal) -> Z3_string;
    pub fn Z3_mk_tactic(c: Z3_context, name: Z3_string) -> Z3_tactic;
    pub fn Z3_tactic_inc_ref(c: Z3_context, t: Z3_tactic) -> ();
    pub fn Z3_tactic_dec_ref(c: Z3_context, g: Z3_tactic) -> ();
    pub fn Z3_mk_probe(c: Z3_context, name: Z3_string) -> Z3_probe;
    pub fn Z3_probe_inc_ref(c: Z3_context, p: Z3_probe) -> ();
    pub fn Z3_probe_dec_ref(c: Z3_context, p: Z3_probe) -> ();
    pub fn Z3_tactic_and_then(c: Z3_context, t1: Z3_tactic, t2: Z3_tactic)
     -> Z3_tactic;
    pub fn Z3_tactic_or_else(c: Z3_context, t1: Z3_tactic, t2: Z3_tactic)
     -> Z3_tactic;
    pub fn Z3_tactic_par_or(c: Z3_context, num: ::libc::c_uint,
                            ts: *const Z3_tactic) -> Z3_tactic;
    pub fn Z3_tactic_par_and_then(c: Z3_context, t1: Z3_tactic, t2: Z3_tactic)
     -> Z3_tactic;
    pub fn Z3_tactic_try_for(c: Z3_context, t: Z3_tactic, ms: ::libc::c_uint)
     -> Z3_tactic;
    pub fn Z3_tactic_when(c: Z3_context, p: Z3_probe, t: Z3_tactic)
     -> Z3_tactic;
    pub fn Z3_tactic_cond(c: Z3_context, p: Z3_probe, t1: Z3_tactic,
                          t2: Z3_tactic) -> Z3_tactic;
    pub fn Z3_tactic_repeat(c: Z3_context, t: Z3_tactic, max: ::libc::c_uint)
     -> Z3_tactic;
    pub fn Z3_tactic_skip(c: Z3_context) -> Z3_tactic;
    pub fn Z3_tactic_fail(c: Z3_context) -> Z3_tactic;
    pub fn Z3_tactic_fail_if(c: Z3_context, p: Z3_probe) -> Z3_tactic;
    pub fn Z3_tactic_fail_if_not_decided(c: Z3_context) -> Z3_tactic;
    pub fn Z3_tactic_using_params(c: Z3_context, t: Z3_tactic, p: Z3_params)
     -> Z3_tactic;
    pub fn Z3_probe_const(x: Z3_context, val: ::libc::c_double) -> Z3_probe;
    pub fn Z3_probe_lt(x: Z3_context, p1: Z3_probe, p2: Z3_probe) -> Z3_probe;
    pub fn Z3_probe_gt(x: Z3_context, p1: Z3_probe, p2: Z3_probe) -> Z3_probe;
    pub fn Z3_probe_le(x: Z3_context, p1: Z3_probe, p2: Z3_probe) -> Z3_probe;
    pub fn Z3_probe_ge(x: Z3_context, p1: Z3_probe, p2: Z3_probe) -> Z3_probe;
    pub fn Z3_probe_eq(x: Z3_context, p1: Z3_probe, p2: Z3_probe) -> Z3_probe;
    pub fn Z3_probe_and(x: Z3_context, p1: Z3_probe, p2: Z3_probe)
     -> Z3_probe;
    pub fn Z3_probe_or(x: Z3_context, p1: Z3_probe, p2: Z3_probe) -> Z3_probe;
    pub fn Z3_probe_not(x: Z3_context, p: Z3_probe) -> Z3_probe;
    pub fn Z3_get_num_tactics(c: Z3_context) -> ::libc::c_uint;
    pub fn Z3_get_tactic_name(c: Z3_context, i: ::libc::c_uint) -> Z3_string;
    pub fn Z3_get_num_probes(c: Z3_context) -> ::libc::c_uint;
    pub fn Z3_get_probe_name(c: Z3_context, i: ::libc::c_uint) -> Z3_string;
    pub fn Z3_tactic_get_help(c: Z3_context, t: Z3_tactic) -> Z3_string;
    pub fn Z3_tactic_get_param_descrs(c: Z3_context, t: Z3_tactic)
     -> Z3_param_descrs;
    pub fn Z3_tactic_get_descr(c: Z3_context, name: Z3_string) -> Z3_string;
    pub fn Z3_probe_get_descr(c: Z3_context, name: Z3_string) -> Z3_string;
    pub fn Z3_probe_apply(c: Z3_context, p: Z3_probe, g: Z3_goal)
     -> ::libc::c_double;
    pub fn Z3_tactic_apply(c: Z3_context, t: Z3_tactic, g: Z3_goal)
     -> Z3_apply_result;
    pub fn Z3_tactic_apply_ex(c: Z3_context, t: Z3_tactic, g: Z3_goal,
                              p: Z3_params) -> Z3_apply_result;
    pub fn Z3_apply_result_inc_ref(c: Z3_context, r: Z3_apply_result) -> ();
    pub fn Z3_apply_result_dec_ref(c: Z3_context, r: Z3_apply_result) -> ();
    pub fn Z3_apply_result_to_string(c: Z3_context, r: Z3_apply_result)
     -> Z3_string;
    pub fn Z3_apply_result_get_num_subgoals(c: Z3_context, r: Z3_apply_result)
     -> ::libc::c_uint;
    pub fn Z3_apply_result_get_subgoal(c: Z3_context, r: Z3_apply_result,
                                       i: ::libc::c_uint) -> Z3_goal;
    pub fn Z3_apply_result_convert_model(c: Z3_context, r: Z3_apply_result,
                                         i: ::libc::c_uint, m: Z3_model)
     -> Z3_model;
    pub fn Z3_mk_solver(c: Z3_context) -> Z3_solver;
    pub fn Z3_mk_simple_solver(c: Z3_context) -> Z3_solver;
    pub fn Z3_mk_solver_for_logic(c: Z3_context, logic: Z3_symbol)
     -> Z3_solver;
    pub fn Z3_mk_solver_from_tactic(c: Z3_context, t: Z3_tactic) -> Z3_solver;
    pub fn Z3_solver_get_help(c: Z3_context, s: Z3_solver) -> Z3_string;
    pub fn Z3_solver_get_param_descrs(c: Z3_context, s: Z3_solver)
     -> Z3_param_descrs;
    pub fn Z3_solver_set_params(c: Z3_context, s: Z3_solver, p: Z3_params)
     -> ();
    pub fn Z3_solver_inc_ref(c: Z3_context, s: Z3_solver) -> ();
    pub fn Z3_solver_dec_ref(c: Z3_context, s: Z3_solver) -> ();
    pub fn Z3_solver_push(c: Z3_context, s: Z3_solver) -> ();
    pub fn Z3_solver_pop(c: Z3_context, s: Z3_solver, n: ::libc::c_uint)
     -> ();
    pub fn Z3_solver_reset(c: Z3_context, s: Z3_solver) -> ();
    pub fn Z3_solver_get_num_scopes(c: Z3_context, s: Z3_solver)
     -> ::libc::c_uint;
    pub fn Z3_solver_assert(c: Z3_context, s: Z3_solver, a: Z3_ast) -> ();
    pub fn Z3_solver_assert_and_track(c: Z3_context, s: Z3_solver, a: Z3_ast,
                                      p: Z3_ast) -> ();
    pub fn Z3_solver_get_assertions(c: Z3_context, s: Z3_solver)
     -> Z3_ast_vector;
    pub fn Z3_solver_check(c: Z3_context, s: Z3_solver) -> Z3_lbool;
    pub fn Z3_solver_check_assumptions(c: Z3_context, s: Z3_solver,
                                       num_assumptions: ::libc::c_uint,
                                       assumptions: *const Z3_ast)
     -> Z3_lbool;
    pub fn Z3_solver_get_model(c: Z3_context, s: Z3_solver) -> Z3_model;
    pub fn Z3_solver_get_proof(c: Z3_context, s: Z3_solver) -> Z3_ast;
    pub fn Z3_solver_get_unsat_core(c: Z3_context, s: Z3_solver)
     -> Z3_ast_vector;
    pub fn Z3_solver_get_reason_unknown(c: Z3_context, s: Z3_solver)
     -> Z3_string;
    pub fn Z3_solver_get_statistics(c: Z3_context, s: Z3_solver) -> Z3_stats;
    pub fn Z3_solver_to_string(c: Z3_context, s: Z3_solver) -> Z3_string;
    pub fn Z3_stats_to_string(c: Z3_context, s: Z3_stats) -> Z3_string;
    pub fn Z3_stats_inc_ref(c: Z3_context, s: Z3_stats) -> ();
    pub fn Z3_stats_dec_ref(c: Z3_context, s: Z3_stats) -> ();
    pub fn Z3_stats_size(c: Z3_context, s: Z3_stats) -> ::libc::c_uint;
    pub fn Z3_stats_get_key(c: Z3_context, s: Z3_stats, idx: ::libc::c_uint)
     -> Z3_string;
    pub fn Z3_stats_is_uint(c: Z3_context, s: Z3_stats, idx: ::libc::c_uint)
     -> Z3_bool;
    pub fn Z3_stats_is_double(c: Z3_context, s: Z3_stats, idx: ::libc::c_uint)
     -> Z3_bool;
    pub fn Z3_stats_get_uint_value(c: Z3_context, s: Z3_stats,
                                   idx: ::libc::c_uint) -> ::libc::c_uint;
    pub fn Z3_stats_get_double_value(c: Z3_context, s: Z3_stats,
                                     idx: ::libc::c_uint) -> ::libc::c_double;
    pub fn Z3_mk_injective_function(c: Z3_context, s: Z3_symbol,
                                    domain_size: ::libc::c_uint,
                                    domain: *const Z3_sort, range: Z3_sort)
     -> Z3_func_decl;
    pub fn Z3_set_logic(c: Z3_context, logic: Z3_string) -> Z3_bool;
    pub fn Z3_push(c: Z3_context) -> ();
    pub fn Z3_pop(c: Z3_context, num_scopes: ::libc::c_uint) -> ();
    pub fn Z3_get_num_scopes(c: Z3_context) -> ::libc::c_uint;
    pub fn Z3_persist_ast(c: Z3_context, a: Z3_ast,
                          num_scopes: ::libc::c_uint) -> ();
    pub fn Z3_assert_cnstr(c: Z3_context, a: Z3_ast) -> ();
    pub fn Z3_check_and_get_model(c: Z3_context, m: *mut Z3_model)
     -> Z3_lbool;
    pub fn Z3_check(c: Z3_context) -> Z3_lbool;
    pub fn Z3_check_assumptions(c: Z3_context,
                                num_assumptions: ::libc::c_uint,
                                assumptions: *const Z3_ast, m: *mut Z3_model,
                                proof: *mut Z3_ast,
                                core_size: *mut ::libc::c_uint,
                                core: *mut Z3_ast) -> Z3_lbool;
    pub fn Z3_get_implied_equalities(c: Z3_context, s: Z3_solver,
                                     num_terms: ::libc::c_uint,
                                     terms: *const Z3_ast,
                                     class_ids: *mut ::libc::c_uint)
     -> Z3_lbool;
    pub fn Z3_del_model(c: Z3_context, m: Z3_model) -> ();
    pub fn Z3_soft_check_cancel(c: Z3_context) -> ();
    pub fn Z3_get_search_failure(c: Z3_context) -> Z3_search_failure;
    pub fn Z3_mk_label(c: Z3_context, s: Z3_symbol, is_pos: Z3_bool,
                       f: Z3_ast) -> Z3_ast;
    pub fn Z3_get_relevant_labels(c: Z3_context) -> Z3_literals;
    pub fn Z3_get_relevant_literals(c: Z3_context) -> Z3_literals;
    pub fn Z3_get_guessed_literals(c: Z3_context) -> Z3_literals;
    pub fn Z3_del_literals(c: Z3_context, lbls: Z3_literals) -> ();
    pub fn Z3_get_num_literals(c: Z3_context, lbls: Z3_literals)
     -> ::libc::c_uint;
    pub fn Z3_get_label_symbol(c: Z3_context, lbls: Z3_literals,
                               idx: ::libc::c_uint) -> Z3_symbol;
    pub fn Z3_get_literal(c: Z3_context, lbls: Z3_literals,
                          idx: ::libc::c_uint) -> Z3_ast;
    pub fn Z3_disable_literal(c: Z3_context, lbls: Z3_literals,
                              idx: ::libc::c_uint) -> ();
    pub fn Z3_block_literals(c: Z3_context, lbls: Z3_literals) -> ();
    pub fn Z3_get_model_num_constants(c: Z3_context, m: Z3_model)
     -> ::libc::c_uint;
    pub fn Z3_get_model_constant(c: Z3_context, m: Z3_model,
                                 i: ::libc::c_uint) -> Z3_func_decl;
    pub fn Z3_get_model_num_funcs(c: Z3_context, m: Z3_model)
     -> ::libc::c_uint;
    pub fn Z3_get_model_func_decl(c: Z3_context, m: Z3_model,
                                  i: ::libc::c_uint) -> Z3_func_decl;
    pub fn Z3_eval_func_decl(c: Z3_context, m: Z3_model, decl: Z3_func_decl,
                             v: *mut Z3_ast) -> Z3_bool;
    pub fn Z3_is_array_value(c: Z3_context, m: Z3_model, v: Z3_ast,
                             num_entries: *mut ::libc::c_uint) -> Z3_bool;
    pub fn Z3_get_array_value(c: Z3_context, m: Z3_model, v: Z3_ast,
                              num_entries: ::libc::c_uint,
                              indices: *mut Z3_ast, values: *mut Z3_ast,
                              else_value: *mut Z3_ast) -> ();
    pub fn Z3_get_model_func_else(c: Z3_context, m: Z3_model,
                                  i: ::libc::c_uint) -> Z3_ast;
    pub fn Z3_get_model_func_num_entries(c: Z3_context, m: Z3_model,
                                         i: ::libc::c_uint) -> ::libc::c_uint;
    pub fn Z3_get_model_func_entry_num_args(c: Z3_context, m: Z3_model,
                                            i: ::libc::c_uint,
                                            j: ::libc::c_uint)
     -> ::libc::c_uint;
    pub fn Z3_get_model_func_entry_arg(c: Z3_context, m: Z3_model,
                                       i: ::libc::c_uint, j: ::libc::c_uint,
                                       k: ::libc::c_uint) -> Z3_ast;
    pub fn Z3_get_model_func_entry_value(c: Z3_context, m: Z3_model,
                                         i: ::libc::c_uint, j: ::libc::c_uint)
     -> Z3_ast;
    pub fn Z3_eval(c: Z3_context, m: Z3_model, t: Z3_ast, v: *mut Z3_ast)
     -> Z3_bool;
    pub fn Z3_eval_decl(c: Z3_context, m: Z3_model, d: Z3_func_decl,
                        num_args: ::libc::c_uint, args: *const Z3_ast,
                        v: *mut Z3_ast) -> Z3_bool;
    pub fn Z3_context_to_string(c: Z3_context) -> Z3_string;
    pub fn Z3_statistics_to_string(c: Z3_context) -> Z3_string;
    pub fn Z3_get_context_assignment(c: Z3_context) -> Z3_ast;
    pub fn Z3_algebraic_is_value(c: Z3_context, a: Z3_ast) -> Z3_bool;
    pub fn Z3_algebraic_is_pos(c: Z3_context, a: Z3_ast) -> Z3_bool;
    pub fn Z3_algebraic_is_neg(c: Z3_context, a: Z3_ast) -> Z3_bool;
    pub fn Z3_algebraic_is_zero(c: Z3_context, a: Z3_ast) -> Z3_bool;
    pub fn Z3_algebraic_sign(c: Z3_context, a: Z3_ast) -> ::libc::c_int;
    pub fn Z3_algebraic_add(c: Z3_context, a: Z3_ast, b: Z3_ast) -> Z3_ast;
    pub fn Z3_algebraic_sub(c: Z3_context, a: Z3_ast, b: Z3_ast) -> Z3_ast;
    pub fn Z3_algebraic_mul(c: Z3_context, a: Z3_ast, b: Z3_ast) -> Z3_ast;
    pub fn Z3_algebraic_div(c: Z3_context, a: Z3_ast, b: Z3_ast) -> Z3_ast;
    pub fn Z3_algebraic_root(c: Z3_context, a: Z3_ast, k: ::libc::c_uint)
     -> Z3_ast;
    pub fn Z3_algebraic_power(c: Z3_context, a: Z3_ast, k: ::libc::c_uint)
     -> Z3_ast;
    pub fn Z3_algebraic_lt(c: Z3_context, a: Z3_ast, b: Z3_ast) -> Z3_bool;
    pub fn Z3_algebraic_gt(c: Z3_context, a: Z3_ast, b: Z3_ast) -> Z3_bool;
    pub fn Z3_algebraic_le(c: Z3_context, a: Z3_ast, b: Z3_ast) -> Z3_bool;
    pub fn Z3_algebraic_ge(c: Z3_context, a: Z3_ast, b: Z3_ast) -> Z3_bool;
    pub fn Z3_algebraic_eq(c: Z3_context, a: Z3_ast, b: Z3_ast) -> Z3_bool;
    pub fn Z3_algebraic_neq(c: Z3_context, a: Z3_ast, b: Z3_ast) -> Z3_bool;
    pub fn Z3_algebraic_roots(c: Z3_context, p: Z3_ast, n: ::libc::c_uint,
                              a: *mut Z3_ast) -> Z3_ast_vector;
    pub fn Z3_algebraic_eval(c: Z3_context, p: Z3_ast, n: ::libc::c_uint,
                             a: *mut Z3_ast) -> ::libc::c_int;
    pub fn Z3_polynomial_subresultants(c: Z3_context, p: Z3_ast, q: Z3_ast,
                                       x: Z3_ast) -> Z3_ast_vector;
    pub fn Z3_rcf_del(c: Z3_context, a: Z3_rcf_num) -> ();
    pub fn Z3_rcf_mk_rational(c: Z3_context, val: Z3_string) -> Z3_rcf_num;
    pub fn Z3_rcf_mk_small_int(c: Z3_context, val: ::libc::c_int)
     -> Z3_rcf_num;
    pub fn Z3_rcf_mk_pi(c: Z3_context) -> Z3_rcf_num;
    pub fn Z3_rcf_mk_e(c: Z3_context) -> Z3_rcf_num;
    pub fn Z3_rcf_mk_infinitesimal(c: Z3_context) -> Z3_rcf_num;
    pub fn Z3_rcf_mk_roots(c: Z3_context, n: ::libc::c_uint,
                           a: *const Z3_rcf_num, roots: *mut Z3_rcf_num)
     -> ::libc::c_uint;
    pub fn Z3_rcf_add(c: Z3_context, a: Z3_rcf_num, b: Z3_rcf_num)
     -> Z3_rcf_num;
    pub fn Z3_rcf_sub(c: Z3_context, a: Z3_rcf_num, b: Z3_rcf_num)
     -> Z3_rcf_num;
    pub fn Z3_rcf_mul(c: Z3_context, a: Z3_rcf_num, b: Z3_rcf_num)
     -> Z3_rcf_num;
    pub fn Z3_rcf_div(c: Z3_context, a: Z3_rcf_num, b: Z3_rcf_num)
     -> Z3_rcf_num;
    pub fn Z3_rcf_neg(c: Z3_context, a: Z3_rcf_num) -> Z3_rcf_num;
    pub fn Z3_rcf_inv(c: Z3_context, a: Z3_rcf_num) -> Z3_rcf_num;
    pub fn Z3_rcf_power(c: Z3_context, a: Z3_rcf_num, k: ::libc::c_uint)
     -> Z3_rcf_num;
    pub fn Z3_rcf_lt(c: Z3_context, a: Z3_rcf_num, b: Z3_rcf_num) -> Z3_bool;
    pub fn Z3_rcf_gt(c: Z3_context, a: Z3_rcf_num, b: Z3_rcf_num) -> Z3_bool;
    pub fn Z3_rcf_le(c: Z3_context, a: Z3_rcf_num, b: Z3_rcf_num) -> Z3_bool;
    pub fn Z3_rcf_ge(c: Z3_context, a: Z3_rcf_num, b: Z3_rcf_num) -> Z3_bool;
    pub fn Z3_rcf_eq(c: Z3_context, a: Z3_rcf_num, b: Z3_rcf_num) -> Z3_bool;
    pub fn Z3_rcf_neq(c: Z3_context, a: Z3_rcf_num, b: Z3_rcf_num) -> Z3_bool;
    pub fn Z3_rcf_num_to_string(c: Z3_context, a: Z3_rcf_num,
                                compact: Z3_bool, html: Z3_bool) -> Z3_string;
    pub fn Z3_rcf_num_to_decimal_string(c: Z3_context, a: Z3_rcf_num,
                                        prec: ::libc::c_uint) -> Z3_string;
    pub fn Z3_rcf_get_numerator_denominator(c: Z3_context, a: Z3_rcf_num,
                                            n: *mut Z3_rcf_num,
                                            d: *mut Z3_rcf_num) -> ();
    pub fn Z3_mk_interpolant(c: Z3_context, a: Z3_ast) -> Z3_ast;
    pub fn Z3_mk_interpolation_context(cfg: Z3_config) -> Z3_context;
    pub fn Z3_get_interpolant(c: Z3_context, pf: Z3_ast, pat: Z3_ast,
                              p: Z3_params) -> Z3_ast_vector;
    pub fn Z3_compute_interpolant(c: Z3_context, pat: Z3_ast, p: Z3_params,
                                  interp: *mut Z3_ast_vector,
                                  model: *mut Z3_model) -> Z3_lbool;
    pub fn Z3_interpolation_profile(ctx: Z3_context) -> Z3_string;
    pub fn Z3_read_interpolation_problem(ctx: Z3_context,
                                         num: *mut ::libc::c_uint,
                                         cnsts: *mut *mut Z3_ast,
                                         parents: *mut *mut ::libc::c_uint,
                                         filename: Z3_string,
                                         error: Z3_string_ptr,
                                         num_theory: *mut ::libc::c_uint,
                                         theory: *mut *mut Z3_ast)
     -> ::libc::c_int;
    pub fn Z3_check_interpolant(ctx: Z3_context, num: ::libc::c_uint,
                                cnsts: *mut Z3_ast,
                                parents: *mut ::libc::c_uint,
                                interps: *mut Z3_ast, error: Z3_string_ptr,
                                num_theory: ::libc::c_uint,
                                theory: *mut Z3_ast) -> ::libc::c_int;
    pub fn Z3_write_interpolation_problem(ctx: Z3_context,
                                          num: ::libc::c_uint,
                                          cnsts: *mut Z3_ast,
                                          parents: *mut ::libc::c_uint,
                                          filename: Z3_string,
                                          num_theory: ::libc::c_uint,
                                          theory: *mut Z3_ast) -> ();
    pub fn Z3_mk_fpa_rounding_mode_sort(c: Z3_context) -> Z3_sort;
    pub fn Z3_mk_fpa_round_nearest_ties_to_even(c: Z3_context) -> Z3_ast;
    pub fn Z3_mk_fpa_rne(c: Z3_context) -> Z3_ast;
    pub fn Z3_mk_fpa_round_nearest_ties_to_away(c: Z3_context) -> Z3_ast;
    pub fn Z3_mk_fpa_rna(c: Z3_context) -> Z3_ast;
    pub fn Z3_mk_fpa_round_toward_positive(c: Z3_context) -> Z3_ast;
    pub fn Z3_mk_fpa_rtp(c: Z3_context) -> Z3_ast;
    pub fn Z3_mk_fpa_round_toward_negative(c: Z3_context) -> Z3_ast;
    pub fn Z3_mk_fpa_rtn(c: Z3_context) -> Z3_ast;
    pub fn Z3_mk_fpa_round_toward_zero(c: Z3_context) -> Z3_ast;
    pub fn Z3_mk_fpa_rtz(c: Z3_context) -> Z3_ast;
    pub fn Z3_mk_fpa_sort(c: Z3_context, ebits: ::libc::c_uint,
                          sbits: ::libc::c_uint) -> Z3_sort;
    pub fn Z3_mk_fpa_sort_half(c: Z3_context) -> Z3_sort;
    pub fn Z3_mk_fpa_sort_16(c: Z3_context) -> Z3_sort;
    pub fn Z3_mk_fpa_sort_single(c: Z3_context) -> Z3_sort;
    pub fn Z3_mk_fpa_sort_32(c: Z3_context) -> Z3_sort;
    pub fn Z3_mk_fpa_sort_double(c: Z3_context) -> Z3_sort;
    pub fn Z3_mk_fpa_sort_64(c: Z3_context) -> Z3_sort;
    pub fn Z3_mk_fpa_sort_quadruple(c: Z3_context) -> Z3_sort;
    pub fn Z3_mk_fpa_sort_128(c: Z3_context) -> Z3_sort;
    pub fn Z3_mk_fpa_nan(c: Z3_context, s: Z3_sort) -> Z3_ast;
    pub fn Z3_mk_fpa_inf(c: Z3_context, s: Z3_sort, negative: Z3_bool)
     -> Z3_ast;
    pub fn Z3_mk_fpa_zero(c: Z3_context, s: Z3_sort, negative: Z3_bool)
     -> Z3_ast;
    pub fn Z3_mk_fpa_fp(c: Z3_context, sgn: Z3_ast, exp: Z3_ast, sig: Z3_ast)
     -> Z3_ast;
    pub fn Z3_mk_fpa_numeral_float(c: Z3_context, v: ::libc::c_float,
                                   ty: Z3_sort) -> Z3_ast;
    pub fn Z3_mk_fpa_numeral_double(c: Z3_context, v: ::libc::c_double,
                                    ty: Z3_sort) -> Z3_ast;
    pub fn Z3_mk_fpa_numeral_int(c: Z3_context, v: ::libc::c_int, ty: Z3_sort)
     -> Z3_ast;
    pub fn Z3_mk_fpa_numeral_int_uint(c: Z3_context, sgn: Z3_bool,
                                      exp: ::libc::c_int, sig: ::libc::c_uint,
                                      ty: Z3_sort) -> Z3_ast;
    pub fn Z3_mk_fpa_numeral_int64_uint64(c: Z3_context, sgn: Z3_bool,
                                          exp: ::libc::c_longlong,
                                          sig: ::libc::c_ulonglong,
                                          ty: Z3_sort) -> Z3_ast;
    pub fn Z3_mk_fpa_abs(c: Z3_context, t: Z3_ast) -> Z3_ast;
    pub fn Z3_mk_fpa_neg(c: Z3_context, t: Z3_ast) -> Z3_ast;
    pub fn Z3_mk_fpa_add(c: Z3_context, rm: Z3_ast, t1: Z3_ast, t2: Z3_ast)
     -> Z3_ast;
    pub fn Z3_mk_fpa_sub(c: Z3_context, rm: Z3_ast, t1: Z3_ast, t2: Z3_ast)
     -> Z3_ast;
    pub fn Z3_mk_fpa_mul(c: Z3_context, rm: Z3_ast, t1: Z3_ast, t2: Z3_ast)
     -> Z3_ast;
    pub fn Z3_mk_fpa_div(c: Z3_context, rm: Z3_ast, t1: Z3_ast, t2: Z3_ast)
     -> Z3_ast;
    pub fn Z3_mk_fpa_fma(c: Z3_context, rm: Z3_ast, t1: Z3_ast, t2: Z3_ast,
                         t3: Z3_ast) -> Z3_ast;
    pub fn Z3_mk_fpa_sqrt(c: Z3_context, rm: Z3_ast, t: Z3_ast) -> Z3_ast;
    pub fn Z3_mk_fpa_rem(c: Z3_context, t1: Z3_ast, t2: Z3_ast) -> Z3_ast;
    pub fn Z3_mk_fpa_round_to_integral(c: Z3_context, rm: Z3_ast, t: Z3_ast)
     -> Z3_ast;
    pub fn Z3_mk_fpa_min(c: Z3_context, t1: Z3_ast, t2: Z3_ast) -> Z3_ast;
    pub fn Z3_mk_fpa_max(c: Z3_context, t1: Z3_ast, t2: Z3_ast) -> Z3_ast;
    pub fn Z3_mk_fpa_leq(c: Z3_context, t1: Z3_ast, t2: Z3_ast) -> Z3_ast;
    pub fn Z3_mk_fpa_lt(c: Z3_context, t1: Z3_ast, t2: Z3_ast) -> Z3_ast;
    pub fn Z3_mk_fpa_geq(c: Z3_context, t1: Z3_ast, t2: Z3_ast) -> Z3_ast;
    pub fn Z3_mk_fpa_gt(c: Z3_context, t1: Z3_ast, t2: Z3_ast) -> Z3_ast;
    pub fn Z3_mk_fpa_eq(c: Z3_context, t1: Z3_ast, t2: Z3_ast) -> Z3_ast;
    pub fn Z3_mk_fpa_is_normal(c: Z3_context, t: Z3_ast) -> Z3_ast;
    pub fn Z3_mk_fpa_is_subnormal(c: Z3_context, t: Z3_ast) -> Z3_ast;
    pub fn Z3_mk_fpa_is_zero(c: Z3_context, t: Z3_ast) -> Z3_ast;
    pub fn Z3_mk_fpa_is_infinite(c: Z3_context, t: Z3_ast) -> Z3_ast;
    pub fn Z3_mk_fpa_is_nan(c: Z3_context, t: Z3_ast) -> Z3_ast;
    pub fn Z3_mk_fpa_is_negative(c: Z3_context, t: Z3_ast) -> Z3_ast;
    pub fn Z3_mk_fpa_is_positive(c: Z3_context, t: Z3_ast) -> Z3_ast;
    pub fn Z3_mk_fpa_to_fp_bv(c: Z3_context, bv: Z3_ast, s: Z3_sort)
     -> Z3_ast;
    pub fn Z3_mk_fpa_to_fp_float(c: Z3_context, rm: Z3_ast, t: Z3_ast,
                                 s: Z3_sort) -> Z3_ast;
    pub fn Z3_mk_fpa_to_fp_real(c: Z3_context, rm: Z3_ast, t: Z3_ast,
                                s: Z3_sort) -> Z3_ast;
    pub fn Z3_mk_fpa_to_fp_signed(c: Z3_context, rm: Z3_ast, t: Z3_ast,
                                  s: Z3_sort) -> Z3_ast;
    pub fn Z3_mk_fpa_to_fp_unsigned(c: Z3_context, rm: Z3_ast, t: Z3_ast,
                                    s: Z3_sort) -> Z3_ast;
    pub fn Z3_mk_fpa_to_ubv(c: Z3_context, rm: Z3_ast, t: Z3_ast,
                            sz: ::libc::c_uint) -> Z3_ast;
    pub fn Z3_mk_fpa_to_sbv(c: Z3_context, rm: Z3_ast, t: Z3_ast,
                            sz: ::libc::c_uint) -> Z3_ast;
    pub fn Z3_mk_fpa_to_real(c: Z3_context, t: Z3_ast) -> Z3_ast;
    pub fn Z3_fpa_get_ebits(c: Z3_context, s: Z3_sort) -> ::libc::c_uint;
    pub fn Z3_fpa_get_sbits(c: Z3_context, s: Z3_sort) -> ::libc::c_uint;
    pub fn Z3_fpa_get_numeral_sign(c: Z3_context, t: Z3_ast,
                                   sgn: *mut ::libc::c_int) -> Z3_bool;
    pub fn Z3_fpa_get_numeral_significand_string(c: Z3_context, t: Z3_ast)
     -> Z3_string;
    pub fn Z3_fpa_get_numeral_significand_uint64(c: Z3_context, t: Z3_ast,
                                                 n: *mut ::libc::c_ulonglong)
     -> Z3_bool;
    pub fn Z3_fpa_get_numeral_exponent_string(c: Z3_context, t: Z3_ast)
     -> Z3_string;
    pub fn Z3_fpa_get_numeral_exponent_int64(c: Z3_context, t: Z3_ast,
                                             n: *mut ::libc::c_longlong)
     -> Z3_bool;
    pub fn Z3_mk_fpa_to_ieee_bv(c: Z3_context, t: Z3_ast) -> Z3_ast;
    pub fn Z3_mk_fpa_to_fp_int_real(c: Z3_context, rm: Z3_ast, exp: Z3_ast,
                                    sig: Z3_ast, s: Z3_sort) -> Z3_ast;
}
